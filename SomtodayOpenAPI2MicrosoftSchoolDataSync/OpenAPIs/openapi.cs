//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace SomtodayOpenAPI2MicrosoftSchoolDataSync
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SomOpenApiClient
    {
        private string _baseUrl = "https://api.acceptatie.somtoday.nl/rest/v1";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SomOpenApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="brin">Optioneel filter op brin nummer (brin4 direct op instelling of brin6 voor vestiging)</param>
        /// <param name="naam">Optioneel filter op naam van vestiging onder instellingen of instelling zelf.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<InstellingResponse> InstellingAsync(string brin, string naam)
        {
            return InstellingAsync(brin, naam, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="brin">Optioneel filter op brin nummer (brin4 direct op instelling of brin6 voor vestiging)</param>
        /// <param name="naam">Optioneel filter op naam van vestiging onder instellingen of instelling zelf.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<InstellingResponse> InstellingAsync(string brin, string naam, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/instelling?");
            if (brin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("brin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (naam != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("naam") + "=").Append(System.Uri.EscapeDataString(ConvertToString(naam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InstellingResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="uuid">UUID van de op te halen vestiging. Als deze parameter niet wordt meegegeven worden alle Vestigingen teruggegeven waar de client recht op heeft.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VestigingResponse> VestigingAsync(System.Guid? uuid, bool? veldpermissies)
        {
            return VestigingAsync(uuid, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="uuid">UUID van de op te halen vestiging. Als deze parameter niet wordt meegegeven worden alle Vestigingen teruggegeven waar de client recht op heeft.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VestigingResponse> VestigingAsync(System.Guid? uuid, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging?");
            if (uuid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("uuid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(uuid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VestigingResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="uuid">UUIDs van de op te halen Leerlingen.
        /// Als deze parameter weggelaten wordt worden alle Leerlingen teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.
        /// Het gebruik van deze query parameter heeft de voorkeur boven de leerlingUUID pad parameter wanneer meerdere specifieke Leerlingen opgehaald moeten worden.</param>
        /// <param name="peilschooljaar">De peilschooljaar parameter is bepalend voor welke Leerlingen er worden teruggegeven omdat gekeken wordt naar wanneer de Leerlingen een actieve Plaatsing hebben.
        /// Een Leerling die vorig jaar van school gegaan is zal bij geen enkele waarde van de peilschooljaar parameter terugkomen.
        /// Een Leerling die volgend jaar voor het eerst een actieve Plaatsing heeft zal alleen terugkomen wanneer de peilschooljaar parameter de waarde VOLGEND krijgt.
        /// De waarde van de peilschooljaar parameter is ook bepalend voor welke Plaatsingen, Lesgroepen en Vakkeuzes met de Leerling meegegeven worden omdat die begin- en einddatums hebben of voor een beperkte tijd aan de Leerling te relateren zijn.</param>
        /// <param name="vestigingUUID">UUID van de Vestiging van de Leerling(en).</param>
        /// <param name="offset">Voor pagination van op te halen Leerlingen. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen Leerlingen. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <param name="subject">Vraag een Leerling met deze specifieke subject claim op. Als een subject gegeven wordt is de amount niet verplicht.</param>
        /// <returns>OK - response bevat gevraagde page met leerlingen</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LeerlingResponse> LeerlingAsync(System.Collections.Generic.IEnumerable<System.Guid> uuid, Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies, string subject)
        {
            return LeerlingAsync(uuid, peilschooljaar, vestigingUUID, offset, amount, veldpermissies, subject, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="uuid">UUIDs van de op te halen Leerlingen.
        /// Als deze parameter weggelaten wordt worden alle Leerlingen teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.
        /// Het gebruik van deze query parameter heeft de voorkeur boven de leerlingUUID pad parameter wanneer meerdere specifieke Leerlingen opgehaald moeten worden.</param>
        /// <param name="peilschooljaar">De peilschooljaar parameter is bepalend voor welke Leerlingen er worden teruggegeven omdat gekeken wordt naar wanneer de Leerlingen een actieve Plaatsing hebben.
        /// Een Leerling die vorig jaar van school gegaan is zal bij geen enkele waarde van de peilschooljaar parameter terugkomen.
        /// Een Leerling die volgend jaar voor het eerst een actieve Plaatsing heeft zal alleen terugkomen wanneer de peilschooljaar parameter de waarde VOLGEND krijgt.
        /// De waarde van de peilschooljaar parameter is ook bepalend voor welke Plaatsingen, Lesgroepen en Vakkeuzes met de Leerling meegegeven worden omdat die begin- en einddatums hebben of voor een beperkte tijd aan de Leerling te relateren zijn.</param>
        /// <param name="vestigingUUID">UUID van de Vestiging van de Leerling(en).</param>
        /// <param name="offset">Voor pagination van op te halen Leerlingen. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen Leerlingen. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <param name="subject">Vraag een Leerling met deze specifieke subject claim op. Als een subject gegeven wordt is de amount niet verplicht.</param>
        /// <returns>OK - response bevat gevraagde page met leerlingen</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LeerlingResponse> LeerlingAsync(System.Collections.Generic.IEnumerable<System.Guid> uuid, Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies, string subject, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/leerling?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (uuid != null)
            {
                foreach (var item_ in uuid) { urlBuilder_.Append(System.Uri.EscapeDataString("uuid") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (subject != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subject") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subject, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LeerlingResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="peilschooljaar">De peilschooljaar parameter is bepalend voor welke Leerlingen er worden teruggegeven omdat gekeken wordt naar wanneer de Leerlingen een actieve Plaatsing hebben.
        /// Een Leerling die vorig jaar van school gegaan is zal bij geen enkele waarde van de peilschooljaar parameter terugkomen.
        /// Een Leerling die volgend jaar voor het eerst een actieve Plaatsing heeft zal alleen terugkomen wanneer de peilschooljaar parameter de waarde VOLGEND krijgt.
        /// De waarde van de peilschooljaar parameter is ook bepalend voor welke Plaatsingen, Lesgroepen en Vakkeuzes met de Leerling meegegeven worden omdat die begin- en einddatums hebben of voor een beperkte tijd aan de Leerling te relateren zijn.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de leerling(en)</param>
        /// <param name="leerlingUUID">UUID van de Leerling</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LeerlingResponse> Leerling2Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid leerlingUUID, bool? veldpermissies)
        {
            return Leerling2Async(peilschooljaar, vestigingUUID, leerlingUUID, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="peilschooljaar">De peilschooljaar parameter is bepalend voor welke Leerlingen er worden teruggegeven omdat gekeken wordt naar wanneer de Leerlingen een actieve Plaatsing hebben.
        /// Een Leerling die vorig jaar van school gegaan is zal bij geen enkele waarde van de peilschooljaar parameter terugkomen.
        /// Een Leerling die volgend jaar voor het eerst een actieve Plaatsing heeft zal alleen terugkomen wanneer de peilschooljaar parameter de waarde VOLGEND krijgt.
        /// De waarde van de peilschooljaar parameter is ook bepalend voor welke Plaatsingen, Lesgroepen en Vakkeuzes met de Leerling meegegeven worden omdat die begin- en einddatums hebben of voor een beperkte tijd aan de Leerling te relateren zijn.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de leerling(en)</param>
        /// <param name="leerlingUUID">UUID van de Leerling</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LeerlingResponse> Leerling2Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid leerlingUUID, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (leerlingUUID == null)
                throw new System.ArgumentNullException("leerlingUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/leerling/{leerlingUUID}?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{leerlingUUID}", System.Uri.EscapeDataString(ConvertToString(leerlingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LeerlingResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vestigingUUID">UUID van de vestiging van de Leerling van wie de pasfoto is.</param>
        /// <param name="leerlingUUID">UUID van de Leerling van wie de pasfoto is.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LeerlingPasfotoResponse> PasfotoAsync(System.Guid vestigingUUID, System.Guid leerlingUUID)
        {
            return PasfotoAsync(vestigingUUID, leerlingUUID, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de Leerling van wie de pasfoto is.</param>
        /// <param name="leerlingUUID">UUID van de Leerling van wie de pasfoto is.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LeerlingPasfotoResponse> PasfotoAsync(System.Guid vestigingUUID, System.Guid leerlingUUID, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (leerlingUUID == null)
                throw new System.ArgumentNullException("leerlingUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/leerling/{leerlingUUID}/pasfoto");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{leerlingUUID}", System.Uri.EscapeDataString(ConvertToString(leerlingUUID, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LeerlingPasfotoResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen geldig token.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("FORBIDDEN - Geen recht om pasfoto voor (deze) leerling op te halen", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND - Leerling bestaat niet of heeft geen pasfoto.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HuiswerkResponse> HuiswerkAsync(System.Guid vestigingUUID, System.Guid leerlingUUID)
        {
            return HuiswerkAsync(vestigingUUID, leerlingUUID, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HuiswerkResponse> HuiswerkAsync(System.Guid vestigingUUID, System.Guid leerlingUUID, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (leerlingUUID == null)
                throw new System.ArgumentNullException("leerlingUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/leerling/{leerlingUUID}/huiswerk");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{leerlingUUID}", System.Uri.EscapeDataString(ConvertToString(leerlingUUID, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HuiswerkResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen geldig token.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("FORBIDDEN - Geen recht om leerlingen of het huiswerk op te halen.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND - Onjuist LeerlingUUID of vestigingUUID.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="toekomstige_toetsen">Geeft aan of informatie van toekomstige toetsen moet worden meegestuurd. Hiervoor worden dan nog geen cijfers ingevuld.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VoortgangsdossierResponse> VoortgangsdossierAsync(System.Guid vestigingUUID, System.Guid leerlingUUID, System.Guid? vak_uuid, bool? toekomstige_toetsen, bool? veldpermissies)
        {
            return VoortgangsdossierAsync(vestigingUUID, leerlingUUID, vak_uuid, toekomstige_toetsen, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="toekomstige_toetsen">Geeft aan of informatie van toekomstige toetsen moet worden meegestuurd. Hiervoor worden dan nog geen cijfers ingevuld.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<VoortgangsdossierResponse> VoortgangsdossierAsync(System.Guid vestigingUUID, System.Guid leerlingUUID, System.Guid? vak_uuid, bool? toekomstige_toetsen, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (leerlingUUID == null)
                throw new System.ArgumentNullException("leerlingUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/leerling/{leerlingUUID}/voortgangsdossier?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{leerlingUUID}", System.Uri.EscapeDataString(ConvertToString(leerlingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (vak_uuid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vak_uuid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vak_uuid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toekomstige_toetsen != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toekomstige_toetsen") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toekomstige_toetsen, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VoortgangsdossierResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen geldig token.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("FORBIDDEN - Geen recht om leerlingen of het voortgangsdossier op te halen.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND - Onjuist VakUUID of LeerlingUUID of vestigingUUID.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="toekomstige_toetsen">Geeft aan of informatie van toekomstige toetsen moet worden meegestuurd. Hiervoor worden dan nog geen cijfers ingevuld.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExamendossierResponse> ExamendossierAsync(System.Guid vestigingUUID, System.Guid leerlingUUID, System.Guid? vak_uuid, bool? toekomstige_toetsen, bool? veldpermissies)
        {
            return ExamendossierAsync(vestigingUUID, leerlingUUID, vak_uuid, toekomstige_toetsen, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="toekomstige_toetsen">Geeft aan of informatie van toekomstige toetsen moet worden meegestuurd. Hiervoor worden dan nog geen cijfers ingevuld.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExamendossierResponse> ExamendossierAsync(System.Guid vestigingUUID, System.Guid leerlingUUID, System.Guid? vak_uuid, bool? toekomstige_toetsen, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (leerlingUUID == null)
                throw new System.ArgumentNullException("leerlingUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/leerling/{leerlingUUID}/examendossier?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{leerlingUUID}", System.Uri.EscapeDataString(ConvertToString(leerlingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (vak_uuid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vak_uuid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vak_uuid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toekomstige_toetsen != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toekomstige_toetsen") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toekomstige_toetsen, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExamendossierResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen geldig token.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("FORBIDDEN - Geen recht om leerlingen of het examendossier op te halen.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND - Onjuist VakUUID of LeerlingUUID of vestigingUUID.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK - De bijlagen worden verzameld en het resultaat zal naar de callbackUrl worden gestuurd.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task BijlagenAsync(System.Guid vestigingUUID, System.Guid huiswerkuuid, HuiswerkBijlagenCallback body)
        {
            return BijlagenAsync(vestigingUUID, huiswerkuuid, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK - De bijlagen worden verzameld en het resultaat zal naar de callbackUrl worden gestuurd.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task BijlagenAsync(System.Guid vestigingUUID, System.Guid huiswerkuuid, HuiswerkBijlagenCallback body, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (huiswerkuuid == null)
                throw new System.ArgumentNullException("huiswerkuuid");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/huiswerk/{huiswerkuuid}/bijlagen");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{huiswerkuuid}", System.Uri.EscapeDataString(ConvertToString(huiswerkuuid, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND - Het huiswerk heeft geen bijlagen, er wordt geen zipbestand gemaakt en de callback wordt niet aangroepen.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vestigingUUID">UUID van de Vestiging waar het Huiswerk is opgegeven.</param>
        /// <returns>CREATED - Huiswerk klik is vastgelegd.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HuiswerkKlik> ClickAsync(System.Guid vestigingUUID, HuiswerkKlik body)
        {
            return ClickAsync(vestigingUUID, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vestigingUUID">UUID van de Vestiging waar het Huiswerk is opgegeven.</param>
        /// <returns>CREATED - Huiswerk klik is vastgelegd.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HuiswerkKlik> ClickAsync(System.Guid vestigingUUID, HuiswerkKlik body, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/huiswerk/click");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HuiswerkKlik>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("BAD REQUEST - fout in het meegestuurde HuiswerkKlik object.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Client heeft geen toegang tot het Connect Koppelvlak.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="uuid">De uuids van de leerlingen van de op te halen accounts.
        /// Als deze parameter weggelaten wordt worden alle Accounts teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.</param>
        /// <param name="peilschooljaar">De peilschooljaar parameter is bepalend voor welke accounts er worden teruggegeven omdat gekeken wordt naar wanneer de Leerlingen een actieve Plaatsing hebben.
        /// Een Leerling die vorig jaar van school gegaan is zal bij geen enkele waarde van de peilschooljaar parameter terugkomen.
        /// Een Leerling die volgend jaar voor het eerst een actieve Plaatsing heeft zal alleen terugkomen wanneer de peilschooljaar parameter de waarde VOLGEND krijgt.</param>
        /// <param name="vestigingUUID">UUID van de Vestiging van de Accounts.</param>
        /// <param name="offset">Voor pagination van op te halen Accounts. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen Accounts. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccountResponse> AccountAsync(System.Collections.Generic.IEnumerable<System.Guid> uuid, Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies)
        {
            return AccountAsync(uuid, peilschooljaar, vestigingUUID, offset, amount, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="uuid">De uuids van de leerlingen van de op te halen accounts.
        /// Als deze parameter weggelaten wordt worden alle Accounts teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.</param>
        /// <param name="peilschooljaar">De peilschooljaar parameter is bepalend voor welke accounts er worden teruggegeven omdat gekeken wordt naar wanneer de Leerlingen een actieve Plaatsing hebben.
        /// Een Leerling die vorig jaar van school gegaan is zal bij geen enkele waarde van de peilschooljaar parameter terugkomen.
        /// Een Leerling die volgend jaar voor het eerst een actieve Plaatsing heeft zal alleen terugkomen wanneer de peilschooljaar parameter de waarde VOLGEND krijgt.</param>
        /// <param name="vestigingUUID">UUID van de Vestiging van de Accounts.</param>
        /// <param name="offset">Voor pagination van op te halen Accounts. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen Accounts. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccountResponse> AccountAsync(System.Collections.Generic.IEnumerable<System.Guid> uuid, Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/leerling/account?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (uuid != null)
            {
                foreach (var item_ in uuid) { urlBuilder_.Append(System.Uri.EscapeDataString("uuid") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vestigingUUID">UUID van de vestiging van de leerlingen</param>
        /// <param name="peilschooljaar">De peilschooljaar parameter is bepalend voor welke leerlingen er accounts kunnen worden aangemaakt, omdat gekeken wordt naar wanneer de Leerlingen een actieve Plaatsing hebben.
        /// Een Leerling die vorig jaar van school gegaan is zal bij geen enkele waarde van de peilschooljaar parameter terugkomen, er wordt dus geen account voor aangemaakt.
        /// Voor een Leerling die volgend jaar voor het eerst een actieve Plaatsing heeft zal alleen een account worden aangemaakt wanneer de peilschooljaar parameter de waarde VOLGEND krijgt.</param>
        /// <returns>OK - De accounts zijn aangemaakt of gewijzigd als de accounts al bestonden.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> AccountAllAsync(System.Guid vestigingUUID, Peilschooljaar? peilschooljaar, System.Collections.Generic.IEnumerable<AccountInput> body)
        {
            return AccountAllAsync(vestigingUUID, peilschooljaar, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de leerlingen</param>
        /// <param name="peilschooljaar">De peilschooljaar parameter is bepalend voor welke leerlingen er accounts kunnen worden aangemaakt, omdat gekeken wordt naar wanneer de Leerlingen een actieve Plaatsing hebben.
        /// Een Leerling die vorig jaar van school gegaan is zal bij geen enkele waarde van de peilschooljaar parameter terugkomen, er wordt dus geen account voor aangemaakt.
        /// Voor een Leerling die volgend jaar voor het eerst een actieve Plaatsing heeft zal alleen een account worden aangemaakt wanneer de peilschooljaar parameter de waarde VOLGEND krijgt.</param>
        /// <returns>OK - De accounts zijn aangemaakt of gewijzigd als de accounts al bestonden.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> AccountAllAsync(System.Guid vestigingUUID, Peilschooljaar? peilschooljaar, System.Collections.Generic.IEnumerable<AccountInput> body, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/leerling/account?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Account>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvalidAccountInput>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<InvalidAccountInput>>("BAD REQUEST - Geen Accounts aangemaakt, respose body bevat foutomschrijvingen.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - De koppelpartij heeft geen permissie om accounts aan te maken.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("PAYLOAD TOO LARGE - Er zijn meer dan 200 AccountInputs opgestuurd. Het request wordt niet verwerkt.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="peilschooljaar">De peilschooljaar parameter is bepalend voor het account van welke Leerlingen er worden teruggegeven omdat gekeken wordt naar wanneer de Leerlingen een actieve Plaatsing hebben.
        /// Een Leerling die vorig jaar van school gegaan is zal bij geen enkele waarde van de peilschooljaar parameter terugkomen.
        /// Een Leerling die volgend jaar voor het eerst een actieve Plaatsing heeft zal alleen terugkomen wanneer de peilschooljaar parameter de waarde VOLGEND krijgt.
        /// De waarde van de peilschooljaar parameter is ook bepalend voor welke Plaatsingen, Lesgroepen en Vakkeuzes met de Leerling meegegeven worden omdat die begin- en einddatums hebben of voor een beperkte tijd aan de Leerling te relateren zijn.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de leerling(en)</param>
        /// <param name="leerlingUUID">UUID van de Leerling</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccountResponse> Account2Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid leerlingUUID, bool? veldpermissies)
        {
            return Account2Async(peilschooljaar, vestigingUUID, leerlingUUID, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="peilschooljaar">De peilschooljaar parameter is bepalend voor het account van welke Leerlingen er worden teruggegeven omdat gekeken wordt naar wanneer de Leerlingen een actieve Plaatsing hebben.
        /// Een Leerling die vorig jaar van school gegaan is zal bij geen enkele waarde van de peilschooljaar parameter terugkomen.
        /// Een Leerling die volgend jaar voor het eerst een actieve Plaatsing heeft zal alleen terugkomen wanneer de peilschooljaar parameter de waarde VOLGEND krijgt.
        /// De waarde van de peilschooljaar parameter is ook bepalend voor welke Plaatsingen, Lesgroepen en Vakkeuzes met de Leerling meegegeven worden omdat die begin- en einddatums hebben of voor een beperkte tijd aan de Leerling te relateren zijn.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de leerling(en)</param>
        /// <param name="leerlingUUID">UUID van de Leerling</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccountResponse> Account2Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid leerlingUUID, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (leerlingUUID == null)
                throw new System.ArgumentNullException("leerlingUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/leerling/{leerlingUUID}/account?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{leerlingUUID}", System.Uri.EscapeDataString(ConvertToString(leerlingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vestigingUUID">UUID van de vestiging van de leerling</param>
        /// <param name="leerlingUUID">UUID van de Leerling</param>
        /// <param name="peilschooljaar">De peilschooljaar parameter bepaalt of er een account kan worden aangemaakt voor de leerling, omdat gekeken wordt naar wanneer de Leerling een actieve Plaatsing heeft.
        /// Een Leerling die vorig jaar van school gegaan is zal bij geen enkele waarde van de peilschooljaar parameter terugkomen, er wordt dus geen account voor aangemaakt.
        /// Voor een Leerling die volgend jaar voor het eerst een actieve Plaatsing heeft zal alleen een account worden aangemaakt wanneer de peilschooljaar parameter de waarde VOLGEND krijgt.</param>
        /// <returns>OK - Het account is aangemaakt of gewijzigd als het account al bestond.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Account> Account3Async(System.Guid vestigingUUID, System.Guid leerlingUUID, Peilschooljaar? peilschooljaar, AccountInput body)
        {
            return Account3Async(vestigingUUID, leerlingUUID, peilschooljaar, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de leerling</param>
        /// <param name="leerlingUUID">UUID van de Leerling</param>
        /// <param name="peilschooljaar">De peilschooljaar parameter bepaalt of er een account kan worden aangemaakt voor de leerling, omdat gekeken wordt naar wanneer de Leerling een actieve Plaatsing heeft.
        /// Een Leerling die vorig jaar van school gegaan is zal bij geen enkele waarde van de peilschooljaar parameter terugkomen, er wordt dus geen account voor aangemaakt.
        /// Voor een Leerling die volgend jaar voor het eerst een actieve Plaatsing heeft zal alleen een account worden aangemaakt wanneer de peilschooljaar parameter de waarde VOLGEND krijgt.</param>
        /// <returns>OK - Het account is aangemaakt of gewijzigd als het account al bestond.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Account> Account3Async(System.Guid vestigingUUID, System.Guid leerlingUUID, Peilschooljaar? peilschooljaar, AccountInput body, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (leerlingUUID == null)
                throw new System.ArgumentNullException("leerlingUUID");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/leerling/{leerlingUUID}/account?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{leerlingUUID}", System.Uri.EscapeDataString(ConvertToString(leerlingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Account>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvalidAccountInput>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<InvalidAccountInput>>("BAD REQUEST - Er is geen account aangemaakt omdat een of meer items onvolledig zijn.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - De koppelpartij heeft geen permissie om accounts aan te maken.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="peilschooljaar">De peilschooljaar parameter is bij Medewerkers van belang omdat daarmee wordt aangegeven welke Lesgroepen er worden teruggegeven.
        /// Als bij een bepaalde waarde voor de peilschooljaar parameter een bepaalde Lesgroep wordt teruggegeven, dan wordt bij diezelfde waarde iedere Medewerker die docent is van die lesgroep teruggegeven.</param>
        /// <param name="uuid">UUIDs van de op te halen Medewerkers.
        /// Als deze parameter weggelaten wordt worden alle Medewerkers teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.
        /// Het gebruik van deze query parameter heeft de voorkeur boven de medewerkerUUID pad parameter wanneer meerdere specifieke Medewerkers opgehaald moeten worden.</param>
        /// <param name="vestigingUUID">UUID van de Vestiging van de Medewerker(s).</param>
        /// <param name="offset">Voor pagination van op te halen Medewerkers. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen Medewerkers. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <param name="subject">Vraag een Medewerker met deze specifieke subject claim op. Als een subject gegeven wordt is de amount niet verplicht.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MedewerkerResponse> MedewerkerAsync(Peilschooljaar? peilschooljaar, System.Collections.Generic.IEnumerable<System.Guid> uuid, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies, string subject)
        {
            return MedewerkerAsync(peilschooljaar, uuid, vestigingUUID, offset, amount, veldpermissies, subject, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="peilschooljaar">De peilschooljaar parameter is bij Medewerkers van belang omdat daarmee wordt aangegeven welke Lesgroepen er worden teruggegeven.
        /// Als bij een bepaalde waarde voor de peilschooljaar parameter een bepaalde Lesgroep wordt teruggegeven, dan wordt bij diezelfde waarde iedere Medewerker die docent is van die lesgroep teruggegeven.</param>
        /// <param name="uuid">UUIDs van de op te halen Medewerkers.
        /// Als deze parameter weggelaten wordt worden alle Medewerkers teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.
        /// Het gebruik van deze query parameter heeft de voorkeur boven de medewerkerUUID pad parameter wanneer meerdere specifieke Medewerkers opgehaald moeten worden.</param>
        /// <param name="vestigingUUID">UUID van de Vestiging van de Medewerker(s).</param>
        /// <param name="offset">Voor pagination van op te halen Medewerkers. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen Medewerkers. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <param name="subject">Vraag een Medewerker met deze specifieke subject claim op. Als een subject gegeven wordt is de amount niet verplicht.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MedewerkerResponse> MedewerkerAsync(Peilschooljaar? peilschooljaar, System.Collections.Generic.IEnumerable<System.Guid> uuid, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies, string subject, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/medewerker?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (uuid != null)
            {
                foreach (var item_ in uuid) { urlBuilder_.Append(System.Uri.EscapeDataString("uuid") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (subject != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subject") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subject, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MedewerkerResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="peilschooljaar">De peilschooljaar parameter is bij Medewerkers van belang omdat daarmee wordt aangegeven welke Lesgroepen er worden teruggegeven.
        /// Als bij een bepaalde waarde voor de peilschooljaar parameter een bepaalde Lesgroep wordt teruggegeven, dan wordt bij diezelfde waarde iedere Medewerker die docent is van die lesgroep teruggegeven.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de medewerker(s).</param>
        /// <param name="medewerkerUUID">UUID van de Medewerker.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MedewerkerResponse> Medewerker2Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid medewerkerUUID, bool? veldpermissies)
        {
            return Medewerker2Async(peilschooljaar, vestigingUUID, medewerkerUUID, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="peilschooljaar">De peilschooljaar parameter is bij Medewerkers van belang omdat daarmee wordt aangegeven welke Lesgroepen er worden teruggegeven.
        /// Als bij een bepaalde waarde voor de peilschooljaar parameter een bepaalde Lesgroep wordt teruggegeven, dan wordt bij diezelfde waarde iedere Medewerker die docent is van die lesgroep teruggegeven.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de medewerker(s).</param>
        /// <param name="medewerkerUUID">UUID van de Medewerker.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MedewerkerResponse> Medewerker2Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid medewerkerUUID, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (medewerkerUUID == null)
                throw new System.ArgumentNullException("medewerkerUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/medewerker/{medewerkerUUID}?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{medewerkerUUID}", System.Uri.EscapeDataString(ConvertToString(medewerkerUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MedewerkerResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND - Medewerker niet gevonden.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vestigingUUID">UUID van de vestiging van de Medewerker van wie de pasfoto is.</param>
        /// <param name="medewerkerUUID">UUID van de Medewerker van wie de pasfoto is.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MedewerkerPasfotoResponse> Pasfoto2Async(System.Guid vestigingUUID, System.Guid medewerkerUUID)
        {
            return Pasfoto2Async(vestigingUUID, medewerkerUUID, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de Medewerker van wie de pasfoto is.</param>
        /// <param name="medewerkerUUID">UUID van de Medewerker van wie de pasfoto is.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MedewerkerPasfotoResponse> Pasfoto2Async(System.Guid vestigingUUID, System.Guid medewerkerUUID, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (medewerkerUUID == null)
                throw new System.ArgumentNullException("medewerkerUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/medewerker/{medewerkerUUID}/pasfoto");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{medewerkerUUID}", System.Uri.EscapeDataString(ConvertToString(medewerkerUUID, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MedewerkerPasfotoResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND - Medewerker of pasfoto niet gevonden.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="uuid">De uuids van de medewerkers van de op te halen accounts.
        /// Als deze parameter weggelaten wordt worden alle Accounts teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.</param>
        /// <param name="vestigingUUID">UUID van de Vestiging van de Accounts.</param>
        /// <param name="offset">Voor pagination van op te halen Accounts. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen Accounts. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccountResponse> Account4Async(System.Collections.Generic.IEnumerable<System.Guid> uuid, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies)
        {
            return Account4Async(uuid, vestigingUUID, offset, amount, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="uuid">De uuids van de medewerkers van de op te halen accounts.
        /// Als deze parameter weggelaten wordt worden alle Accounts teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.</param>
        /// <param name="vestigingUUID">UUID van de Vestiging van de Accounts.</param>
        /// <param name="offset">Voor pagination van op te halen Accounts. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen Accounts. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccountResponse> Account4Async(System.Collections.Generic.IEnumerable<System.Guid> uuid, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/medewerker/account?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (uuid != null)
            {
                foreach (var item_ in uuid) { urlBuilder_.Append(System.Uri.EscapeDataString("uuid") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vestigingUUID">UUID van de vestiging van de medewerkers</param>
        /// <returns>OK - De accounts zijn aangemaakt of gewijzigd als de accounts al bestonden.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> Account5Async(System.Guid vestigingUUID, System.Collections.Generic.IEnumerable<AccountInput> body)
        {
            return Account5Async(vestigingUUID, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de medewerkers</param>
        /// <returns>OK - De accounts zijn aangemaakt of gewijzigd als de accounts al bestonden.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> Account5Async(System.Guid vestigingUUID, System.Collections.Generic.IEnumerable<AccountInput> body, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/medewerker/account");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Account>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvalidAccountInput>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<InvalidAccountInput>>("BAD REQUEST - Er zijn geen accounts aangemaakt omdat een of meer items onvolledig zijn.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - De koppelpartij heeft geen permissie om accounts aan te maken.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("PAYLOAD TOO LARGE - Er zijn meer dan 200 AccountInputs opgestuurd. Het request wordt niet verwerkt.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vestigingUUID">UUID van de vestiging van de medewerker(s)</param>
        /// <param name="medewerkerUUID">UUID van de Medewerker</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccountResponse> Account6Async(System.Guid vestigingUUID, System.Guid medewerkerUUID, bool? veldpermissies)
        {
            return Account6Async(vestigingUUID, medewerkerUUID, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de medewerker(s)</param>
        /// <param name="medewerkerUUID">UUID van de Medewerker</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccountResponse> Account6Async(System.Guid vestigingUUID, System.Guid medewerkerUUID, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (medewerkerUUID == null)
                throw new System.ArgumentNullException("medewerkerUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/medewerker/{medewerkerUUID}/account?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{medewerkerUUID}", System.Uri.EscapeDataString(ConvertToString(medewerkerUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND - De medewerker met de opgegeven UUID kan niet worden gevonden. Mogelijk heeft de client geen permissie voor deze medewerker.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vestigingUUID">UUID van de vestiging van de medewerker</param>
        /// <param name="medewerkerUUID">UUID van de Medewerker</param>
        /// <returns>OK - Het account is aangemaakt of gewijzigd als het account al bestond.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Account> Account7Async(System.Guid vestigingUUID, System.Guid medewerkerUUID, AccountInput body)
        {
            return Account7Async(vestigingUUID, medewerkerUUID, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de medewerker</param>
        /// <param name="medewerkerUUID">UUID van de Medewerker</param>
        /// <returns>OK - Het account is aangemaakt of gewijzigd als het account al bestond.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Account> Account7Async(System.Guid vestigingUUID, System.Guid medewerkerUUID, AccountInput body, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (medewerkerUUID == null)
                throw new System.ArgumentNullException("medewerkerUUID");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/medewerker/{medewerkerUUID}/account");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{medewerkerUUID}", System.Uri.EscapeDataString(ConvertToString(medewerkerUUID, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Account>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvalidAccountInput>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<InvalidAccountInput>>("BAD REQUEST - Er is geen account aangemaakt omdat een of meer items onvolledig zijn.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - De koppelpartij heeft geen permissie om accounts aan te maken.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="uuid">UUIDs van de op te halen Lesgroepen.
        /// Als deze parameter weggelaten wordt worden alle Lesgroepen teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.
        /// Het gebruik van deze query parameter heeft de voorkeur boven de lesgroepUUID pad parameter wanneer meerdere specifieke Lesgroepen opgehaald moeten worden.</param>
        /// <param name="peilschooljaar">De werking van de peilschooljaar parameter is in het geval van Lesgroepen een beetje bijzonder omdat Lesgroepen zelf altijd al aan een specifiek schooljaar gekoppeld zijn.
        /// Daardoor verschilt de response nooit qua welke Lesgroepen er worden teruggegeven wanneer je de parameter weglaat of kiest voor HUIDIG, maar bijvoorbeeld de Leerlingen in de Lesgroep kunnen verschillen wanneer verwacht wordt dat er gedurende de rest van het schooljaar Leerlingen overstappen.
        /// Natuurlijk zijn Lesgroepen voor het volgende schooljaar onzichtbaar voor de client totdat de client als peilschooljaar parameter VOLGEND meegeeft.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de Lesgroep(en).</param>
        /// <param name="offset">Voor pagination van op te halen Lesgroepen. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen Lesgroepen. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <param name="stamgroep">Wanneer deze parameter geset wordt, filteren we op lesgroepen die wel (true) of niet (false) aan een stamgroep gekoppeld zijn.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LesgroepResponse> LesgroepAsync(System.Collections.Generic.IEnumerable<System.Guid> uuid, Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies, bool? stamgroep)
        {
            return LesgroepAsync(uuid, peilschooljaar, vestigingUUID, offset, amount, veldpermissies, stamgroep, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="uuid">UUIDs van de op te halen Lesgroepen.
        /// Als deze parameter weggelaten wordt worden alle Lesgroepen teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.
        /// Het gebruik van deze query parameter heeft de voorkeur boven de lesgroepUUID pad parameter wanneer meerdere specifieke Lesgroepen opgehaald moeten worden.</param>
        /// <param name="peilschooljaar">De werking van de peilschooljaar parameter is in het geval van Lesgroepen een beetje bijzonder omdat Lesgroepen zelf altijd al aan een specifiek schooljaar gekoppeld zijn.
        /// Daardoor verschilt de response nooit qua welke Lesgroepen er worden teruggegeven wanneer je de parameter weglaat of kiest voor HUIDIG, maar bijvoorbeeld de Leerlingen in de Lesgroep kunnen verschillen wanneer verwacht wordt dat er gedurende de rest van het schooljaar Leerlingen overstappen.
        /// Natuurlijk zijn Lesgroepen voor het volgende schooljaar onzichtbaar voor de client totdat de client als peilschooljaar parameter VOLGEND meegeeft.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de Lesgroep(en).</param>
        /// <param name="offset">Voor pagination van op te halen Lesgroepen. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen Lesgroepen. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <param name="stamgroep">Wanneer deze parameter geset wordt, filteren we op lesgroepen die wel (true) of niet (false) aan een stamgroep gekoppeld zijn.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LesgroepResponse> LesgroepAsync(System.Collections.Generic.IEnumerable<System.Guid> uuid, Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies, bool? stamgroep, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/lesgroep/?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (uuid != null)
            {
                foreach (var item_ in uuid) { urlBuilder_.Append(System.Uri.EscapeDataString("uuid") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stamgroep != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stamgroep") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stamgroep, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LesgroepResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="peilschooljaar">De werking van de peilschooljaar parameter is in het geval van Lesgroepen een beetje bijzonder omdat Lesgroepen zelf altijd al aan een specifiek schooljaar gekoppeld zijn.
        /// Daardoor verschilt de response nooit qua welke Lesgroepen er worden teruggegeven wanneer je de parameter weglaat of kiest voor HUIDIG, maar bijvoorbeeld de Leerlingen in de Lesgroep kunnen verschillen wanneer verwacht wordt dat er gedurende de rest van het schooljaar Leerlingen overstappen.
        /// Natuurlijk zijn Lesgroepen voor het volgende schooljaar onzichtbaar voor de client totdat de client als peilschooljaar parameter VOLGEND meegeeft.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de Lesgroep(en).</param>
        /// <param name="lesgroepUUID">UUID van de Lesgroep.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LesgroepResponse> Lesgroep2Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid lesgroepUUID, bool? veldpermissies)
        {
            return Lesgroep2Async(peilschooljaar, vestigingUUID, lesgroepUUID, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="peilschooljaar">De werking van de peilschooljaar parameter is in het geval van Lesgroepen een beetje bijzonder omdat Lesgroepen zelf altijd al aan een specifiek schooljaar gekoppeld zijn.
        /// Daardoor verschilt de response nooit qua welke Lesgroepen er worden teruggegeven wanneer je de parameter weglaat of kiest voor HUIDIG, maar bijvoorbeeld de Leerlingen in de Lesgroep kunnen verschillen wanneer verwacht wordt dat er gedurende de rest van het schooljaar Leerlingen overstappen.
        /// Natuurlijk zijn Lesgroepen voor het volgende schooljaar onzichtbaar voor de client totdat de client als peilschooljaar parameter VOLGEND meegeeft.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de Lesgroep(en).</param>
        /// <param name="lesgroepUUID">UUID van de Lesgroep.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LesgroepResponse> Lesgroep2Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid lesgroepUUID, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (lesgroepUUID == null)
                throw new System.ArgumentNullException("lesgroepUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/lesgroep/{lesgroepUUID}?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{lesgroepUUID}", System.Uri.EscapeDataString(ConvertToString(lesgroepUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LesgroepResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="peilschooljaar">De werking van de peilschooljaar parameter is in het geval van Lesgroepen een beetje bijzonder omdat Lesgroepen zelf altijd al aan een specifiek schooljaar gekoppeld zijn.
        /// Daardoor verschilt de response nooit qua welke Lesgroepen er worden teruggegeven wanneer je de parameter weglaat of kiest voor HUIDIG, maar bijvoorbeeld de Leerlingen in de Lesgroep kunnen verschillen wanneer verwacht wordt dat er gedurende de rest van het schooljaar Leerlingen overstappen.
        /// Natuurlijk zijn Lesgroepen voor het volgende schooljaar onzichtbaar voor de client totdat de client als peilschooljaar parameter VOLGEND meegeeft.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de Lesgroep(en).</param>
        /// <param name="lesgroepUUID">UUID van de Lesgroep.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HuiswerkResponse> Huiswerk2Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid lesgroepUUID)
        {
            return Huiswerk2Async(peilschooljaar, vestigingUUID, lesgroepUUID, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="peilschooljaar">De werking van de peilschooljaar parameter is in het geval van Lesgroepen een beetje bijzonder omdat Lesgroepen zelf altijd al aan een specifiek schooljaar gekoppeld zijn.
        /// Daardoor verschilt de response nooit qua welke Lesgroepen er worden teruggegeven wanneer je de parameter weglaat of kiest voor HUIDIG, maar bijvoorbeeld de Leerlingen in de Lesgroep kunnen verschillen wanneer verwacht wordt dat er gedurende de rest van het schooljaar Leerlingen overstappen.
        /// Natuurlijk zijn Lesgroepen voor het volgende schooljaar onzichtbaar voor de client totdat de client als peilschooljaar parameter VOLGEND meegeeft.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de Lesgroep(en).</param>
        /// <param name="lesgroepUUID">UUID van de Lesgroep.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HuiswerkResponse> Huiswerk2Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid lesgroepUUID, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (lesgroepUUID == null)
                throw new System.ArgumentNullException("lesgroepUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/lesgroep/{lesgroepUUID}/huiswerk?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{lesgroepUUID}", System.Uri.EscapeDataString(ConvertToString(lesgroepUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HuiswerkResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND - Lesgroep bestaat niet of ongeldig VestigingUUID meegegeven.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="uuid">UUIDs van de op te halen Lesgroepen.
        /// Als deze parameter weggelaten wordt worden alle Lesgroepen teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.
        /// Het gebruik van deze query parameter heeft de voorkeur boven de lesgroepUUID pad parameter wanneer meerdere specifieke Lesgroepen opgehaald moeten worden.</param>
        /// <param name="peilschooljaar">Houd er rekening mee dat een OuderVerzorger alleen opgevraagd kan worden als ten minste één van de bijbehorende Leerlingen opgevraagd kan worden.
        /// Met andere woorden is het verstandig om, bij het ophalen van de OuderVerzorgers van bepaalde Leerlingen, dezelfde peilschooljaar parameter mee te geven als bij het ophalen van die Leerlingen.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de OuderVerzorgers.</param>
        /// <param name="offset">Voor pagination van op te halen OuderVerzorgers. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen OuderVerzorgers. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <param name="subject">Vraag een OuderVerzorger met deze specifieke subject claim op. Als een subject gegeven wordt is de amount niet verplicht.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OuderVerzorgerResponse> OuderVerzorgerAsync(System.Collections.Generic.IEnumerable<System.Guid> uuid, Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies, string subject)
        {
            return OuderVerzorgerAsync(uuid, peilschooljaar, vestigingUUID, offset, amount, veldpermissies, subject, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="uuid">UUIDs van de op te halen Lesgroepen.
        /// Als deze parameter weggelaten wordt worden alle Lesgroepen teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.
        /// Het gebruik van deze query parameter heeft de voorkeur boven de lesgroepUUID pad parameter wanneer meerdere specifieke Lesgroepen opgehaald moeten worden.</param>
        /// <param name="peilschooljaar">Houd er rekening mee dat een OuderVerzorger alleen opgevraagd kan worden als ten minste één van de bijbehorende Leerlingen opgevraagd kan worden.
        /// Met andere woorden is het verstandig om, bij het ophalen van de OuderVerzorgers van bepaalde Leerlingen, dezelfde peilschooljaar parameter mee te geven als bij het ophalen van die Leerlingen.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de OuderVerzorgers.</param>
        /// <param name="offset">Voor pagination van op te halen OuderVerzorgers. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen OuderVerzorgers. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <param name="subject">Vraag een OuderVerzorger met deze specifieke subject claim op. Als een subject gegeven wordt is de amount niet verplicht.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OuderVerzorgerResponse> OuderVerzorgerAsync(System.Collections.Generic.IEnumerable<System.Guid> uuid, Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies, string subject, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/ouderVerzorger/?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (uuid != null)
            {
                foreach (var item_ in uuid) { urlBuilder_.Append(System.Uri.EscapeDataString("uuid") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (subject != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subject") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subject, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OuderVerzorgerResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="peilschooljaar">Houd er rekening mee dat een OuderVerzorger alleen opgevraagd kan worden als ten minste één van de bijbehorende Leerlingen opgevraagd kan worden.
        /// Met andere woorden is het verstandig om, bij het ophalen van de OuderVerzorgers van bepaalde Leerlingen, dezelfde peilschooljaar parameter mee te geven als bij het ophalen van die Leerlingen.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de OuderVerzorgers.</param>
        /// <param name="ouderVerzorgerUUID">UUIDs van de op te halen OuderVerzorger.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OuderVerzorgerResponse> OuderVerzorger2Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid ouderVerzorgerUUID, bool? veldpermissies)
        {
            return OuderVerzorger2Async(peilschooljaar, vestigingUUID, ouderVerzorgerUUID, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="peilschooljaar">Houd er rekening mee dat een OuderVerzorger alleen opgevraagd kan worden als ten minste één van de bijbehorende Leerlingen opgevraagd kan worden.
        /// Met andere woorden is het verstandig om, bij het ophalen van de OuderVerzorgers van bepaalde Leerlingen, dezelfde peilschooljaar parameter mee te geven als bij het ophalen van die Leerlingen.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de OuderVerzorgers.</param>
        /// <param name="ouderVerzorgerUUID">UUIDs van de op te halen OuderVerzorger.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<OuderVerzorgerResponse> OuderVerzorger2Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid ouderVerzorgerUUID, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (ouderVerzorgerUUID == null)
                throw new System.ArgumentNullException("ouderVerzorgerUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/ouderVerzorger/{ouderVerzorgerUUID}?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ouderVerzorgerUUID}", System.Uri.EscapeDataString(ConvertToString(ouderVerzorgerUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OuderVerzorgerResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND - OuderVerzorger niet gevonden.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="uuid">De uuids van de ouders/verzorgers van de op te halen accounts.
        /// Als deze parameter weggelaten wordt worden alle Accounts teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.</param>
        /// <param name="peilschooljaar">Houd er rekening mee dat een OuderVerzorger account alleen opgevraagd kan worden als ten minste één van de bijbehorende Leerlingen opgevraagd kan worden.
        /// Met andere woorden is het verstandig om, bij het ophalen van de OuderVerzorger accounts van een bepaalde Leerlingen, dezelfde peilschooljaar parameter mee te geven als bij het ophalen van die Leerlingen.</param>
        /// <param name="vestigingUUID">UUID van de Vestiging van de Ouderverzorgers.</param>
        /// <param name="offset">Voor pagination van op te halen Accounts. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen Accounts. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccountResponse> Account8Async(System.Collections.Generic.IEnumerable<System.Guid> uuid, Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies)
        {
            return Account8Async(uuid, peilschooljaar, vestigingUUID, offset, amount, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="uuid">De uuids van de ouders/verzorgers van de op te halen accounts.
        /// Als deze parameter weggelaten wordt worden alle Accounts teruggegeven waar de client recht op heeft en die voldoen aan eventuele overige query parameters.</param>
        /// <param name="peilschooljaar">Houd er rekening mee dat een OuderVerzorger account alleen opgevraagd kan worden als ten minste één van de bijbehorende Leerlingen opgevraagd kan worden.
        /// Met andere woorden is het verstandig om, bij het ophalen van de OuderVerzorger accounts van een bepaalde Leerlingen, dezelfde peilschooljaar parameter mee te geven als bij het ophalen van die Leerlingen.</param>
        /// <param name="vestigingUUID">UUID van de Vestiging van de Ouderverzorgers.</param>
        /// <param name="offset">Voor pagination van op te halen Accounts. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen Accounts. Maximaal 200.</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccountResponse> Account8Async(System.Collections.Generic.IEnumerable<System.Guid> uuid, Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, int? offset, int amount, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/ouderVerzorger/account?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (uuid != null)
            {
                foreach (var item_ in uuid) { urlBuilder_.Append(System.Uri.EscapeDataString("uuid") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vestigingUUID">UUID van de vestiging van de ouders/verzorgers</param>
        /// <param name="peilschooljaar">Houd er rekening mee dat het account van een ouder/verzorger alleen opgevraagd kan worden als ten minste één van de bijbehorende Leerlingen opgevraagd kan worden.</param>
        /// <returns>OK - De accounts zijn aangemaakt of gewijzigd als de accounts al bestonden.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> Account9Async(System.Guid vestigingUUID, Peilschooljaar? peilschooljaar, System.Collections.Generic.IEnumerable<AccountInput> body)
        {
            return Account9Async(vestigingUUID, peilschooljaar, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de ouders/verzorgers</param>
        /// <param name="peilschooljaar">Houd er rekening mee dat het account van een ouder/verzorger alleen opgevraagd kan worden als ten minste één van de bijbehorende Leerlingen opgevraagd kan worden.</param>
        /// <returns>OK - De accounts zijn aangemaakt of gewijzigd als de accounts al bestonden.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> Account9Async(System.Guid vestigingUUID, Peilschooljaar? peilschooljaar, System.Collections.Generic.IEnumerable<AccountInput> body, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/ouderVerzorger/account?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Account>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvalidAccountInput>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<InvalidAccountInput>>("BAD REQUEST - Er zijn geen accounts aangemaakt omdat een of meer items onvolledig zijn.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - De koppelpartij heeft geen permissie om accounts aan te maken.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 413)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("PAYLOAD TOO LARGE - Er zijn meer dan 200 AccountInputs opgestuurd. Het request wordt niet verwerkt.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="peilschooljaar">Er kunnen alleen accounts worden opgehaald voor ouders/verzorgers die binnen het meegegeven peilschooljaar een leerling op school hebben zitten.
        /// Als er geen peilschooljaar wordt meegegeven wordt alleen gekeken naar ouders/verzorgers die vandaag een leerling op school hebben zitten.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de ouder/verzorger</param>
        /// <param name="ouderVerzorgerUUID">UUID van de ouder/verzorger</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccountResponse> Account10Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid ouderVerzorgerUUID, bool? veldpermissies)
        {
            return Account10Async(peilschooljaar, vestigingUUID, ouderVerzorgerUUID, veldpermissies, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="peilschooljaar">Er kunnen alleen accounts worden opgehaald voor ouders/verzorgers die binnen het meegegeven peilschooljaar een leerling op school hebben zitten.
        /// Als er geen peilschooljaar wordt meegegeven wordt alleen gekeken naar ouders/verzorgers die vandaag een leerling op school hebben zitten.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de ouder/verzorger</param>
        /// <param name="ouderVerzorgerUUID">UUID van de ouder/verzorger</param>
        /// <param name="veldpermissies">Geeft aan of de veldpermissies van de koppelpartij voor deze call moeten worden meegestuurd.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AccountResponse> Account10Async(Peilschooljaar? peilschooljaar, System.Guid vestigingUUID, System.Guid ouderVerzorgerUUID, bool? veldpermissies, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (ouderVerzorgerUUID == null)
                throw new System.ArgumentNullException("ouderVerzorgerUUID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/ouderVerzorger/{ouderVerzorgerUUID}/account?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ouderVerzorgerUUID}", System.Uri.EscapeDataString(ConvertToString(ouderVerzorgerUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (veldpermissies != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("veldpermissies") + "=").Append(System.Uri.EscapeDataString(ConvertToString(veldpermissies, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountResponse>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - Geen toegang tot Vestiging of toegang verloopt voor begin van peilschooljaar.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("NOT FOUND - OuderVerzorger of Account niet gevonden.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vestigingUUID">UUID van de vestiging van de ouder/verzorger</param>
        /// <param name="ouderVerzorgerUUID">UUID van de ouder/verzorger</param>
        /// <param name="peilschooljaar">Er kunnen alleen accounts worden aangemaakt of aangepast voor ouders/verzorgers die binnen het meegegeven peilschooljaar een leerling op school hebben zitten.
        /// Als er geen peilschooljaar wordt meegegeven wordt alleen gekeken naar ouders/verzorgers die vandaag een leerling op school hebben zitten.</param>
        /// <returns>OK - Het account is aangemaakt of gewijzigd als het account al bestond.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Account> Account11Async(System.Guid vestigingUUID, System.Guid ouderVerzorgerUUID, Peilschooljaar? peilschooljaar, AccountInput body)
        {
            return Account11Async(vestigingUUID, ouderVerzorgerUUID, peilschooljaar, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vestigingUUID">UUID van de vestiging van de ouder/verzorger</param>
        /// <param name="ouderVerzorgerUUID">UUID van de ouder/verzorger</param>
        /// <param name="peilschooljaar">Er kunnen alleen accounts worden aangemaakt of aangepast voor ouders/verzorgers die binnen het meegegeven peilschooljaar een leerling op school hebben zitten.
        /// Als er geen peilschooljaar wordt meegegeven wordt alleen gekeken naar ouders/verzorgers die vandaag een leerling op school hebben zitten.</param>
        /// <returns>OK - Het account is aangemaakt of gewijzigd als het account al bestond.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Account> Account11Async(System.Guid vestigingUUID, System.Guid ouderVerzorgerUUID, Peilschooljaar? peilschooljaar, AccountInput body, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (ouderVerzorgerUUID == null)
                throw new System.ArgumentNullException("ouderVerzorgerUUID");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/ouderVerzorger/{ouderVerzorgerUUID}/account?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ouderVerzorgerUUID}", System.Uri.EscapeDataString(ConvertToString(ouderVerzorgerUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (peilschooljaar != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("peilschooljaar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(peilschooljaar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Account>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvalidAccountInput>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<System.Collections.Generic.ICollection<InvalidAccountInput>>("BAD REQUEST - Er is geen account aangemaakt omdat een of meer items onvolledig zijn.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("UNAUTHORIZED - De koppelpartij heeft geen permissie om accounts aan te maken.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Vraag de status van een LeerlingResultaat op</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="resultaatId">UUID van het op te vragen LeerlingResultaat</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RLeerlingResultaatStatus> GetLeerlingResultaatAsync(System.Guid vestigingUUID, System.Guid resultaatId)
        {
            return GetLeerlingResultaatAsync(vestigingUUID, resultaatId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag de status van een LeerlingResultaat op</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="resultaatId">UUID van het op te vragen LeerlingResultaat</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RLeerlingResultaatStatus> GetLeerlingResultaatAsync(System.Guid vestigingUUID, System.Guid resultaatId, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (resultaatId == null)
                throw new System.ArgumentNullException("resultaatId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/resultaat/resultaat/{resultaatId}");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resultaatId}", System.Uri.EscapeDataString(ConvertToString(resultaatId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RLeerlingResultaatStatus>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Maak een nieuw summatief LeerlingResultaat aan voor een toetsafname.</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="body">Het aan te maken leerlingresultaat</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RLeerlingResultaat> PostLeerlingResultaatAsync(System.Guid vestigingUUID, RLeerlingResultaat body)
        {
            return PostLeerlingResultaatAsync(vestigingUUID, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Maak een nieuw summatief LeerlingResultaat aan voor een toetsafname.</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="body">Het aan te maken leerlingresultaat</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RLeerlingResultaat> PostLeerlingResultaatAsync(System.Guid vestigingUUID, RLeerlingResultaat body, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/resultaat/resultaat");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RLeerlingResultaat>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RLeerlingResultaat>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Maak een nieuw FormatiefLeerlingResultaat aan voor een toetsafname.</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="body">Het aan te maken leerlingresultaat</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RFormatiefLeerlingResultaat> PostFormatiefLeerlingResultaatAsync(System.Guid vestigingUUID, RFormatiefLeerlingResultaat body)
        {
            return PostFormatiefLeerlingResultaatAsync(vestigingUUID, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Maak een nieuw FormatiefLeerlingResultaat aan voor een toetsafname.</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="body">Het aan te maken leerlingresultaat</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RFormatiefLeerlingResultaat> PostFormatiefLeerlingResultaatAsync(System.Guid vestigingUUID, RFormatiefLeerlingResultaat body, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/resultaat/formatief");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RFormatiefLeerlingResultaat>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RFormatiefLeerlingResultaat>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Maak een nieuwe toets aan</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="body">De aan te maken toetsdata</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RToets> PostToetsAsync(System.Guid vestigingUUID, RToets body)
        {
            return PostToetsAsync(vestigingUUID, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Maak een nieuwe toets aan</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="body">De aan te maken toetsdata</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RToets> PostToetsAsync(System.Guid vestigingUUID, RToets body, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/resultaat/toets");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RToets>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RToets>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Vraag een specifieke beschikbare toets op</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="id">De unieke identifier van de toets</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RToets> GetToetsAsync(System.Guid vestigingUUID, string id)
        {
            return GetToetsAsync(vestigingUUID, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een specifieke beschikbare toets op</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="id">De unieke identifier van de toets</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RToets> GetToetsAsync(System.Guid vestigingUUID, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/resultaat/toets/{id}");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RToets>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Maak een nieuwe toetsafname aan</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="body">De aan te maken toetsafname</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RToetsAfname> PostToetsAfnameAsync(System.Guid vestigingUUID, RToetsAfname body)
        {
            return PostToetsAfnameAsync(vestigingUUID, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Maak een nieuwe toetsafname aan</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="body">De aan te maken toetsafname</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RToetsAfname> PostToetsAfnameAsync(System.Guid vestigingUUID, RToetsAfname body, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/resultaat/toetsafname");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RToetsAfname>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RToetsAfname>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Vraag een specifieke beschikbare toetsafname op, niet updatebaar</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="id">De unieke identifier van de toetsafname</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RToetsAfname> GetToetsAfnameAsync(System.Guid vestigingUUID, string id)
        {
            return GetToetsAfnameAsync(vestigingUUID, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een specifieke beschikbare toetsafname op, niet updatebaar</summary>
        /// <param name="vestigingUUID">UUID van de vestiging.</param>
        /// <param name="id">De unieke identifier van de toetsafname</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RToetsAfname> GetToetsAfnameAsync(System.Guid vestigingUUID, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/resultaat/toetsafname/{id}");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("*/*"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RToetsAfname>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="vestigingUUID">UUID van de vestiging waar de events betrekking op hebben</param>
        /// <param name="index">Index van de laatst opgehaalde event. Het Events endpoint gaat alle events na die event teruggeven.</param>
        /// <param name="offset">Voor pagination van op te halen events. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen events. Maximaal 200.</param>
        /// <param name="categorie">Over wat voor entiteit de opgevraagde events moeten gaan (bijvoorbeeld Leerling, Lesgroep, Medewerker)</param>
        /// <returns>Aanroep geslaagd, zie response body voor event objecten.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> EventsAsync(System.Guid vestigingUUID, long? index, int? offset, int amount, string categorie)
        {
            return EventsAsync(vestigingUUID, index, offset, amount, categorie, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="vestigingUUID">UUID van de vestiging waar de events betrekking op hebben</param>
        /// <param name="index">Index van de laatst opgehaalde event. Het Events endpoint gaat alle events na die event teruggeven.</param>
        /// <param name="offset">Voor pagination van op te halen events. Default 0, verhoog voor verdere calls met amount</param>
        /// <param name="amount">Voor pagination van op te halen events. Maximaal 200.</param>
        /// <param name="categorie">Over wat voor entiteit de opgevraagde events moeten gaan (bijvoorbeeld Leerling, Lesgroep, Medewerker)</param>
        /// <returns>Aanroep geslaagd, zie response body voor event objecten.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Event>> EventsAsync(System.Guid vestigingUUID, long? index, int? offset, int amount, string categorie, System.Threading.CancellationToken cancellationToken)
        {
            if (vestigingUUID == null)
                throw new System.ArgumentNullException("vestigingUUID");

            if (amount == null)
                throw new System.ArgumentNullException("amount");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connect/vestiging/{vestigingUUID}/events?");
            urlBuilder_.Replace("{vestigingUUID}", System.Uri.EscapeDataString(ConvertToString(vestigingUUID, System.Globalization.CultureInfo.InvariantCulture)));
            if (index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (categorie != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("categorie") + "=").Append(System.Uri.EscapeDataString(ConvertToString(categorie, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Event>>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }

    /// <summary>Response object voor het Instelling endpoint.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InstellingResponse
    {
        [Newtonsoft.Json.JsonProperty("instellingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Instelling> Instellingen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Response object voor het Vestiging endpoint.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VestigingResponse
    {
        [Newtonsoft.Json.JsonProperty("vestigingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vestiging> Vestigingen { get; set; }

        [Newtonsoft.Json.JsonProperty("veldpermissies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VestigingVeldpermissies Veldpermissies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden van een Vestiging de Koppelpartij bij deze school recht heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VestigingVeldpermissies
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Naam { get; set; }

        [Newtonsoft.Json.JsonProperty("brins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Brins { get; set; }

        [Newtonsoft.Json.JsonProperty("afkorting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Afkorting { get; set; }

        [Newtonsoft.Json.JsonProperty("digideliveryid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Digideliveryid { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Response object voor de Leerling endpoints.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LeerlingResponse
    {
        [Newtonsoft.Json.JsonProperty("leerlingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Leerling> Leerlingen { get; set; }

        [Newtonsoft.Json.JsonProperty("veldpermissies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeerlingVeldpermissies Veldpermissies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden van de Leerlingen van deze Vestiging de Koppelpartij recht heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LeerlingVeldpermissies
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("eckid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Eckid { get; set; }

        [Newtonsoft.Json.JsonProperty("leerlingnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Leerlingnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("roepnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Roepnaam { get; set; }

        [Newtonsoft.Json.JsonProperty("voornamen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voornamen { get; set; }

        [Newtonsoft.Json.JsonProperty("voorletters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voorletters { get; set; }

        [Newtonsoft.Json.JsonProperty("voorvoegsel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voorvoegsel { get; set; }

        [Newtonsoft.Json.JsonProperty("achternaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Achternaam { get; set; }

        [Newtonsoft.Json.JsonProperty("geslacht", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Geslacht { get; set; }

        [Newtonsoft.Json.JsonProperty("geboortedatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Geboortedatum { get; set; }

        [Newtonsoft.Json.JsonProperty("emailadres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Emailadres { get; set; }

        [Newtonsoft.Json.JsonProperty("mobielnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Mobielnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("telefoonnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Telefoonnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("adres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Adres { get; set; }

        [Newtonsoft.Json.JsonProperty("verzorgers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Verzorgers { get; set; }

        [Newtonsoft.Json.JsonProperty("vestiging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Vestiging { get; set; }

        /// <summary>Veld dat beschrijft of de Koppelpartij van de Leerlingen van deze Vestiging een lijst van Plaatsingen te zien krijgt.</summary>
        [Newtonsoft.Json.JsonProperty("plaatsingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Plaatsingen { get; set; }

        [Newtonsoft.Json.JsonProperty("plaatsingVeldpermissies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlaatsingVeldpermissies PlaatsingVeldpermissies { get; set; }

        [Newtonsoft.Json.JsonProperty("lesgroepen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Lesgroepen { get; set; }

        [Newtonsoft.Json.JsonProperty("vakkeuzes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Vakkeuzes { get; set; }

        [Newtonsoft.Json.JsonProperty("gebruikersnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Gebruikersnaam { get; set; }

        [Newtonsoft.Json.JsonProperty("eduPersonRealId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EduPersonRealId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden van de Plaatsingen van de Leerlingen van deze Vestiging de Koppelpartij recht heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlaatsingVeldpermissies
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("schooljaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Schooljaar { get; set; }

        [Newtonsoft.Json.JsonProperty("startdatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Startdatum { get; set; }

        [Newtonsoft.Json.JsonProperty("einddatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Einddatum { get; set; }

        [Newtonsoft.Json.JsonProperty("leerjaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Leerjaar { get; set; }

        [Newtonsoft.Json.JsonProperty("opleiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Opleiding { get; set; }

        [Newtonsoft.Json.JsonProperty("stamgroep", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Stamgroep { get; set; }

        [Newtonsoft.Json.JsonProperty("mentor_plaatsing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Mentor_plaatsing { get; set; }

        [Newtonsoft.Json.JsonProperty("eerste_mentor_stamgroep", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Eerste_mentor_stamgroep { get; set; }

        [Newtonsoft.Json.JsonProperty("tweede_mentor_stamgroep", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Tweede_mentor_stamgroep { get; set; }

        [Newtonsoft.Json.JsonProperty("digiDeliveryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DigiDeliveryId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Response object voor de Medewerker endpoints.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MedewerkerResponse
    {
        [Newtonsoft.Json.JsonProperty("medewerkers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Medewerker> Medewerkers { get; set; }

        [Newtonsoft.Json.JsonProperty("veldpermissies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MedewerkerVeldpermissies Veldpermissies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden van de Medewerkers van deze Vestiging de Koppelpartij recht heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MedewerkerVeldpermissies
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("eckid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Eckid { get; set; }

        [Newtonsoft.Json.JsonProperty("bsn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Bsn { get; set; }

        [Newtonsoft.Json.JsonProperty("roepnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Roepnaam { get; set; }

        [Newtonsoft.Json.JsonProperty("voorletters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voorletters { get; set; }

        [Newtonsoft.Json.JsonProperty("voorvoegsel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voorvoegsel { get; set; }

        [Newtonsoft.Json.JsonProperty("achternaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Achternaam { get; set; }

        [Newtonsoft.Json.JsonProperty("geslacht", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Geslacht { get; set; }

        [Newtonsoft.Json.JsonProperty("geboortedatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Geboortedatum { get; set; }

        [Newtonsoft.Json.JsonProperty("adres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Adres { get; set; }

        [Newtonsoft.Json.JsonProperty("emailadres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Emailadres { get; set; }

        [Newtonsoft.Json.JsonProperty("prive_email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Prive_email { get; set; }

        [Newtonsoft.Json.JsonProperty("werk_telefoonnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Werk_telefoonnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("prive_telefoonnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Prive_telefoonnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("medewerkernummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Medewerkernummer { get; set; }

        [Newtonsoft.Json.JsonProperty("afkorting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Afkorting { get; set; }

        [Newtonsoft.Json.JsonProperty("lesgroepen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Lesgroepen { get; set; }

        [Newtonsoft.Json.JsonProperty("vestiging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Vestiging { get; set; }

        [Newtonsoft.Json.JsonProperty("hoofdvestiging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Hoofdvestiging { get; set; }

        [Newtonsoft.Json.JsonProperty("is_docent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_docent { get; set; }

        [Newtonsoft.Json.JsonProperty("functie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Functie { get; set; }

        [Newtonsoft.Json.JsonProperty("gebruikersnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Gebruikersnaam { get; set; }

        [Newtonsoft.Json.JsonProperty("externnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Externnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("eduPersonRealId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EduPersonRealId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Response object voor de Lesgroep endpoints.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LesgroepResponse
    {
        [Newtonsoft.Json.JsonProperty("lesgroepen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Lesgroep> Lesgroepen { get; set; }

        [Newtonsoft.Json.JsonProperty("veldpermissies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LesgroepVeldpermissies Veldpermissies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden van de Lesgroepen van deze Vestiging de Koppelpartij recht heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LesgroepVeldpermissies
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Naam { get; set; }

        [Newtonsoft.Json.JsonProperty("leerlingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Leerlingen { get; set; }

        [Newtonsoft.Json.JsonProperty("docenten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Docenten { get; set; }

        [Newtonsoft.Json.JsonProperty("vak", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Vak { get; set; }

        [Newtonsoft.Json.JsonProperty("vaknaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Vaknaam { get; set; }

        [Newtonsoft.Json.JsonProperty("landelijke_vakcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Landelijke_vakcode { get; set; }

        [Newtonsoft.Json.JsonProperty("vakuuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Vakuuid { get; set; }

        [Newtonsoft.Json.JsonProperty("vakkeuzes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Vakkeuzes { get; set; }

        [Newtonsoft.Json.JsonProperty("leerjaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Leerjaar { get; set; }

        [Newtonsoft.Json.JsonProperty("schooljaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Schooljaar { get; set; }

        [Newtonsoft.Json.JsonProperty("onderwijssoort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Onderwijssoort { get; set; }

        [Newtonsoft.Json.JsonProperty("vestiging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Vestiging { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Response object voor de OuderVerzorger endpoints.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OuderVerzorgerResponse
    {
        [Newtonsoft.Json.JsonProperty("ouderVerzorgers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OuderVerzorger> OuderVerzorgers { get; set; }

        [Newtonsoft.Json.JsonProperty("veldpermissies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OuderVerzorgerVeldpermissies Veldpermissies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden van de OuderVerzorgers van deze Vestiging de Koppelpartij recht heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OuderVerzorgerVeldpermissies
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("geslacht", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Geslacht { get; set; }

        [Newtonsoft.Json.JsonProperty("voorletters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voorletters { get; set; }

        [Newtonsoft.Json.JsonProperty("voorvoegsel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voorvoegsel { get; set; }

        [Newtonsoft.Json.JsonProperty("achternaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Achternaam { get; set; }

        [Newtonsoft.Json.JsonProperty("gebruikersnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Gebruikersnaam { get; set; }

        [Newtonsoft.Json.JsonProperty("emailadres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Emailadres { get; set; }

        [Newtonsoft.Json.JsonProperty("telefoonnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Telefoonnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("adres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Adres { get; set; }

        [Newtonsoft.Json.JsonProperty("leerlingen_van_vestiging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Leerlingen_van_vestiging { get; set; }

        [Newtonsoft.Json.JsonProperty("relatie_tot_leerlingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Relatie_tot_leerlingen { get; set; }

        [Newtonsoft.Json.JsonProperty("relatie_tot_leerlingen_permissies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LeerlingReferentieVeldpermissies Relatie_tot_leerlingen_permissies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden van de relatie tot de leerlingen van deze Vestiging de Koppelpartij recht heeft. Deze Vestiging is in deze context de Vestiging waarvoor het request gedaan wordt.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LeerlingReferentieVeldpermissies
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("relatiesoort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Relatiesoort { get; set; }

        [Newtonsoft.Json.JsonProperty("ouderlijk_gezag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Ouderlijk_gezag { get; set; }

        [Newtonsoft.Json.JsonProperty("mag_post_ontvangen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Mag_post_ontvangen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Response object voor het Pasfoto endpoint voor de Leerlingen.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LeerlingPasfotoResponse
    {
        [Newtonsoft.Json.JsonProperty("pasfoto", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pasfoto Pasfoto { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Response object voor het Pasfoto endpoint voor de Medewerkers.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MedewerkerPasfotoResponse
    {
        [Newtonsoft.Json.JsonProperty("pasfoto", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pasfoto Pasfoto { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HuiswerkResponse
    {
        [Newtonsoft.Json.JsonProperty("huiswerk", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Huiswerk> Huiswerk { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden van de Vakkeuzes van de Leerlingen van deze Vestiging de Koppelpartij recht heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VakkeuzeVeldpermissies
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("begindatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Begindatum { get; set; }

        [Newtonsoft.Json.JsonProperty("einddatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Einddatum { get; set; }

        [Newtonsoft.Json.JsonProperty("landelijke_vakcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Landelijke_vakcode { get; set; }

        [Newtonsoft.Json.JsonProperty("landelijke_vaknaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Landelijke_vaknaam { get; set; }

        [Newtonsoft.Json.JsonProperty("school_vaknaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool School_vaknaam { get; set; }

        [Newtonsoft.Json.JsonProperty("school_vakafkorting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool School_vakafkorting { get; set; }

        [Newtonsoft.Json.JsonProperty("niveau", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Niveau { get; set; }

        [Newtonsoft.Json.JsonProperty("leerjaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Leerjaar { get; set; }

        [Newtonsoft.Json.JsonProperty("onderwijssoort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Onderwijssoort { get; set; }

        [Newtonsoft.Json.JsonProperty("opleiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Opleiding { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Response object voor endpoint waarop de voortgangsdossiers van een leerling worden uitgeleverd</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VoortgangsdossierResponse
    {
        [Newtonsoft.Json.JsonProperty("voortgangsdossiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VoortgangsDossier> Voortgangsdossiers { get; set; }

        [Newtonsoft.Json.JsonProperty("veldpermissies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoortgangsdossierPermissies Veldpermissies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden van het voorgangsdossier van de leerling de Koppelpartij recht heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VoortgangsdossierPermissies
    {
        [Newtonsoft.Json.JsonProperty("vakuuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Vakuuid { get; set; }

        [Newtonsoft.Json.JsonProperty("vaknaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Vaknaam { get; set; }

        [Newtonsoft.Json.JsonProperty("niveau", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Niveau { get; set; }

        [Newtonsoft.Json.JsonProperty("leerjaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Leerjaar { get; set; }

        [Newtonsoft.Json.JsonProperty("periodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Periodes { get; set; }

        [Newtonsoft.Json.JsonProperty("periodeVeldpermissies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VoortgangsdossierPeriodePermissies PeriodeVeldpermissies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden van het de periodes uit een voorgangsdossier van de leerling de Koppelpartij recht heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VoortgangsdossierPeriodePermissies
    {
        [Newtonsoft.Json.JsonProperty("periode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Periode { get; set; }

        [Newtonsoft.Json.JsonProperty("periodegemiddelde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Periodegemiddelde { get; set; }

        [Newtonsoft.Json.JsonProperty("rapportgemiddelde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Rapportgemiddelde { get; set; }

        [Newtonsoft.Json.JsonProperty("resultaten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Resultaten { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat het voorgangsdossier van de leerling de Koppelpartij beschrijft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VoortgangsDossier
    {
        [Newtonsoft.Json.JsonProperty("vakuuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Vakuuid { get; set; }

        /// <summary>naam van het schoolspecifieke vak.</summary>
        [Newtonsoft.Json.JsonProperty("vaknaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vaknaam { get; set; }

        [Newtonsoft.Json.JsonProperty("niveau", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Niveau { get; set; }

        /// <summary>leerjaar 1 t/m 6</summary>
        [Newtonsoft.Json.JsonProperty("leerjaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Leerjaar { get; set; }

        /// <summary>omschrijving van de standaard normering voor dit dossier.</summary>
        [Newtonsoft.Json.JsonProperty("omschrijving_standaard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Omschrijving_standaard { get; set; }

        /// <summary>omschrijving van de alternatieve normering voor dit dossier.</summary>
        [Newtonsoft.Json.JsonProperty("omschrijving_alternatief", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Omschrijving_alternatief { get; set; }

        [Newtonsoft.Json.JsonProperty("periodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VoortgangsdossierPeriode> Periodes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat een periode uit het voorgangsdossier van de leerling de Koppelpartij beschrijft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VoortgangsdossierPeriode
    {
        [Newtonsoft.Json.JsonProperty("periode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Periode { get; set; }

        [Newtonsoft.Json.JsonProperty("periodegemiddelde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Periodegemiddelde { get; set; }

        [Newtonsoft.Json.JsonProperty("periodegemiddelde_alternatief", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Periodegemiddelde_alternatief { get; set; }

        [Newtonsoft.Json.JsonProperty("rapportgemiddelde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rapportgemiddelde { get; set; }

        [Newtonsoft.Json.JsonProperty("rapportgemiddelde_alternatief", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rapportgemiddelde_alternatief { get; set; }

        [Newtonsoft.Json.JsonProperty("resultaten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DossierResultaat> Resultaten { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat een resultaat uit periode uit het voorgangsdossier van de leerling de Koppelpartij beschrijft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DossierResultaat
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("omschrijving", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Omschrijving { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>Het type toets bij dit resultaat. De opties zijn TOETS, SAMENGESTELDETOETS</summary>
        [Newtonsoft.Json.JsonProperty("toetsType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DossierResultaatToetsType ToetsType { get; set; }

        [Newtonsoft.Json.JsonProperty("weging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Weging { get; set; }

        [Newtonsoft.Json.JsonProperty("geldend_resultaat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geldend_resultaat { get; set; }

        /// <summary>geldend resultaat volgens alternatieve normering</summary>
        [Newtonsoft.Json.JsonProperty("geldend_resultaat_alternatief", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geldend_resultaat_alternatief { get; set; }

        /// <summary>resultaatpogingen alleen beschikbaar bij type TOETS</summary>
        [Newtonsoft.Json.JsonProperty("pogingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DossierResultaatPoging> Pogingen { get; set; }

        /// <summary>deeltoetsen bij resultaat alleen beschikbaar bij type SAMENGESTELDETOETS</summary>
        [Newtonsoft.Json.JsonProperty("deeltoetsen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Deeltoets> Deeltoetsen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat een poging van een resultaat uit periode uit het voorgangsdossier van de leerling de Koppelpartij beschrijft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DossierResultaatPoging
    {
        [Newtonsoft.Json.JsonProperty("resultaat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resultaat { get; set; }

        [Newtonsoft.Json.JsonProperty("resultaat_alternatief", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resultaat_alternatief { get; set; }

        [Newtonsoft.Json.JsonProperty("poging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Poging { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Deeltoets</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Deeltoets
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("omschrijving", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Omschrijving { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("geldend_resultaat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geldend_resultaat { get; set; }

        [Newtonsoft.Json.JsonProperty("geldend_resultaat_alternatief", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geldend_resultaat_alternatief { get; set; }

        [Newtonsoft.Json.JsonProperty("weging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Weging { get; set; }

        /// <summary>resultaatpogingen alleen beschikbaar bij type TOETS</summary>
        [Newtonsoft.Json.JsonProperty("pogingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DossierResultaatPoging> Pogingen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>esponse object voor endpoint waarop het examendossier van een vak van een leerling wordt uitgeleverd</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExamendossierResponse
    {
        [Newtonsoft.Json.JsonProperty("examendossiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExamenDossier> Examendossiers { get; set; }

        [Newtonsoft.Json.JsonProperty("veldpermissies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExamendossierPermissies Veldpermissies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden uit het examendossier van de leerling de Koppelpartij recht heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExamendossierPermissies
    {
        [Newtonsoft.Json.JsonProperty("vakUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool VakUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("niveau", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Niveau { get; set; }

        [Newtonsoft.Json.JsonProperty("se_eindcijfer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Se_eindcijfer { get; set; }

        [Newtonsoft.Json.JsonProperty("eindcijfer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Eindcijfer { get; set; }

        [Newtonsoft.Json.JsonProperty("se_resultaten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Se_resultaten { get; set; }

        [Newtonsoft.Json.JsonProperty("ce_deel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Ce_deel { get; set; }

        [Newtonsoft.Json.JsonProperty("ce_deelVeldpermissies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExamendossierCeDeelPermissies Ce_deelVeldpermissies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden uit CE-deel van het examendossier van de leerling de Koppelpartij recht heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExamendossierCeDeelPermissies
    {
        [Newtonsoft.Json.JsonProperty("ce_eindcijfer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Ce_eindcijfer { get; set; }

        [Newtonsoft.Json.JsonProperty("ce_resultaten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Ce_resultaten { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat het examendossier van de leerling beschrijft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExamenDossier
    {
        [Newtonsoft.Json.JsonProperty("vakUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid VakUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("vakNaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VakNaam { get; set; }

        [Newtonsoft.Json.JsonProperty("niveau", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Niveau { get; set; }

        [Newtonsoft.Json.JsonProperty("lichting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lichting { get; set; }

        [Newtonsoft.Json.JsonProperty("eindcijfer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Eindcijfer { get; set; }

        [Newtonsoft.Json.JsonProperty("se_resultaten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExamendossierSeDeel Se_resultaten { get; set; }

        [Newtonsoft.Json.JsonProperty("ce_resultaten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExamendossierCeDeel Ce_resultaten { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat het SE-deel van het examendossier van de leerling beschrijft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExamendossierSeDeel
    {
        [Newtonsoft.Json.JsonProperty("se_eindcijfer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Se_eindcijfer { get; set; }

        [Newtonsoft.Json.JsonProperty("se_resultaten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DossierResultaat> Se_resultaten { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat het CE-deel van het examendossier van de leerling beschrijft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExamendossierCeDeel
    {
        [Newtonsoft.Json.JsonProperty("ce_eindcijfer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ce_eindcijfer { get; set; }

        [Newtonsoft.Json.JsonProperty("ce_resultaten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExamendossierCeResultaat> Ce_resultaten { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExamendossierCeResultaat
    {
        [Newtonsoft.Json.JsonProperty("tijdvak", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tijdvak { get; set; }

        [Newtonsoft.Json.JsonProperty("geldend_resultaat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geldend_resultaat { get; set; }

        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Variant { get; set; }

        [Newtonsoft.Json.JsonProperty("deelexamens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeelExamen> Deelexamens { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat een deelexamen uit het CE-deel van het examendossier van de leerling beschrijft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeelExamen
    {
        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naam { get; set; }

        [Newtonsoft.Json.JsonProperty("geldend_resultaat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geldend_resultaat { get; set; }

        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Variant { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Instelling
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>De naam van de Instelling.</summary>
        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naam { get; set; }

        /// <summary>De afkorting van de Instelling.</summary>
        [Newtonsoft.Json.JsonProperty("afkorting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Afkortng { get; set; }

        /// <summary>Lijst van BRIN4 nummers van de instelling. Het eerste BRINnummer is het standaardnummer.</summary>
        [Newtonsoft.Json.JsonProperty("brins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Brins { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een Vestiging is een organisatorisch lichaam binnen een school. Een school kan meerdere Vestigingen hebben.
    /// Clients van het Connect Koppelvlak krijgen altijd permissies voor specifieke Vestigingen. Deze permissies kunnen dus per Vestiging verschillen.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Vestiging
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>De naam van de Vestiging.</summary>
        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naam { get; set; }

        /// <summary>De afkorting van de Vestiging.</summary>
        [Newtonsoft.Json.JsonProperty("afkorting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Afkorting { get; set; }

        /// <summary>Lijst van BRIN6 nummers van de Vestiging.</summary>
        [Newtonsoft.Json.JsonProperty("brins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Brins { get; set; }

        /// <summary>Lijst van BRIN6 nummers van de Vestiging met eventueel bijbehorende digideliveryID's.</summary>
        [Newtonsoft.Json.JsonProperty("externalidentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalIdentifiers> Externalidentifiers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalIdentifiers
    {
        [Newtonsoft.Json.JsonProperty("brinnr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Brinnr { get; set; }

        [Newtonsoft.Json.JsonProperty("digideliveryid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Digideliveryid { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Adresgegevens van een Leerling of Medewerker. Merk op dat adressen in het buitenland niet ondersteund worden.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Adres
    {
        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postcode { get; set; }

        [Newtonsoft.Json.JsonProperty("straat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Straat { get; set; }

        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Huisnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("woonplaats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Woonplaats { get; set; }

        [Newtonsoft.Json.JsonProperty("land", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Land { get; set; }

        [Newtonsoft.Json.JsonProperty("buitenlands_adres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Buitenlands_adres { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een Leerling op een school.
    /// Een Leerling is uniek binnen een Instelling maar kan op verschillende momenten onderwijs volgen op verschillende Vestigingen.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Leerling
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>Het ECK-ID van de Leerling.</summary>
        [Newtonsoft.Json.JsonProperty("eckid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Eckid { get; set; }

        /// <summary>Het leerlingnummer is uniek binnen de Instelling.</summary>
        [Newtonsoft.Json.JsonProperty("leerlingnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Leerlingnummer { get; set; }

        /// <summary>De roepnaam van de Leerling. Er is ook een veld voor de volledige voornamen van de Leerling.</summary>
        [Newtonsoft.Json.JsonProperty("roepnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Roepnaam { get; set; }

        /// <summary>De volledige voornamen van de Leerling. Er is ook een veld voor de roepnaam van de Leerling.</summary>
        [Newtonsoft.Json.JsonProperty("voornamen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Voornamen { get; set; }

        /// <summary>De voorletters van de voornamen van de Leerling.</summary>
        [Newtonsoft.Json.JsonProperty("voorletters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Voorletters { get; set; }

        /// <summary>Het voorvoegsel van de achternaam van de Leerling.</summary>
        [Newtonsoft.Json.JsonProperty("voorvoegsel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Voorvoegsel { get; set; }

        /// <summary>De achternaam van de Leerling. Er is een apart veld voor de voorvoegsels van de achternaam.</summary>
        [Newtonsoft.Json.JsonProperty("achternaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Achternaam { get; set; }

        /// <summary>Het geslacht van de Leerling. De opties zijn MAN, VROUW en ONBEKEND.</summary>
        [Newtonsoft.Json.JsonProperty("geslacht", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LeerlingGeslacht Geslacht { get; set; }

        /// <summary>De geboortedatum van de Leerling, in het format YYYY-MM-DD.</summary>
        [Newtonsoft.Json.JsonProperty("geboortedatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Geboortedatum { get; set; }

        /// <summary>Het e-mailadres van de Leerling. Het is niet gegarandeerd dat dit uniek is.</summary>
        [Newtonsoft.Json.JsonProperty("emailadres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Emailadres { get; set; }

        /// <summary>Het mobiele telefoonnummer van de Leerling.</summary>
        [Newtonsoft.Json.JsonProperty("mobielnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobielnummer { get; set; }

        /// <summary>Het telefoonnummer van de leerling.</summary>
        [Newtonsoft.Json.JsonProperty("telefoonnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telefoonnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("adres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Adres Adres { get; set; }

        /// <summary>De ouders/verzogers van de leerling.</summary>
        [Newtonsoft.Json.JsonProperty("verzorgers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OuderVerzorgerReferentie> Verzorgers { get; set; }

        /// <summary>Altijd de Vestiging waarvoor de aanroep gedaan wordt.</summary>
        [Newtonsoft.Json.JsonProperty("vestiging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VestigingReferentie Vestiging { get; set; }

        [Newtonsoft.Json.JsonProperty("plaatsingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Plaatsing> Plaatsingen { get; set; }

        /// <summary>De Lesgroepen waar de Leerling in zit of waar de Leerling gedurende een moment binnen het peilschooljaar zal zitten.</summary>
        [Newtonsoft.Json.JsonProperty("lesgroepen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LesgroepReferentie> Lesgroepen { get; set; }

        /// <summary>De Vakken die de Leerling volgt of die de Leerling gedurende een moment binnen het peilschooljaar zal volgen.</summary>
        [Newtonsoft.Json.JsonProperty("vakkeuzes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vakkeuze> Vakkeuzes { get; set; }

        /// <summary>De gebruikersnaam (inlognaam) van het account van de Leerling.</summary>
        [Newtonsoft.Json.JsonProperty("gebruikersnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gebruikersnaam { get; set; }

        /// <summary>Kennisnet identifier</summary>
        [Newtonsoft.Json.JsonProperty("eduPersonRealId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EduPersonRealId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een Leerling heeft één of meer ouders en/of verzorgers.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OuderVerzorgerReferentie
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>Waar deze OuderVerzorger zich bevindt in de volgorde van aanspreekpunten met betrekking tot deze Leerling. Volgnummer 1 is het eerste aanspreekpunt.</summary>
        [Newtonsoft.Json.JsonProperty("volgnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Volgnummer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een Plaatsing geeft aan welk onderwijs een Leerling op een bepaalde Vestiging van de school volgt.
    /// Een Leerling kan op één moment maar één actieve (actuele) Plaatsing hebben, maar over tijd kan de Leerling meerdere Plaatsingen hebben doordat de Leerling bijvoorbeeld van Opleiding wisselt.
    /// Een Leerling krijgt in de regel ieder schooljaar een nieuwe Plaatsing.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Plaatsing
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>Het schooljaar waarbinnen deze Plaatsing valt.
        /// Dit is in principe ook uit de begin- en einddatum van de Plaatsing af te leiden, maar omdat het concept schooljaar een onderwijskundige betekenis heeft hebben we het voor het gemak toch toegevoegd.</summary>
        [Newtonsoft.Json.JsonProperty("schooljaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schooljaar { get; set; }

        /// <summary>De datum vanaf wanneer deze Plaatsing actueel is. Vóór deze datum is de Plaatsing niet geldig, maar op deze datum wel.
        /// In het format YYYY-MM-DD.</summary>
        [Newtonsoft.Json.JsonProperty("startdatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Startdatum { get; set; }

        /// <summary>De datum tot wanneer deze Plaatsing actueel is. Na deze datum is de Plaatsing niet geldig, maar op deze datum wel.
        /// In het format YYYY-MM-DD.</summary>
        [Newtonsoft.Json.JsonProperty("einddatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Einddatum { get; set; }

        /// <summary>Het leerjaar (1 - 6) waarin de Leerling zit tijdens de geldigheid van deze Plaatsing.
        /// Dit is het leerjaar van de Opleiding en heeft in principe geen betrekking op het op hoger niveau volgen of eerder examen afleggen voor bepaalde Vakken.</summary>
        [Newtonsoft.Json.JsonProperty("leerjaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Leerjaar { get; set; }

        /// <summary>De Opleiding die de Leerling volgt gedurende de looptijd van deze Plaatsing.</summary>
        [Newtonsoft.Json.JsonProperty("opleiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Opleiding Opleiding { get; set; }

        /// <summary>De Stamgroep waar de Leerling in geplaatst is gedurende de looptijd van deze Plaatsing.</summary>
        [Newtonsoft.Json.JsonProperty("stamgroep", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stamgroep Stamgroep { get; set; }

        /// <summary>Referenties naar de Medewerkers die gedurende de looptijd van deze Plaatsing als Mentor op kunnen treden voor de Leerling.</summary>
        [Newtonsoft.Json.JsonProperty("mentoren", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Mentor> Mentoren { get; set; }

        /// <summary>Het digiDeliveryId van de Vestiging waar de Leerling gedurende deze Plaatsing op zit.</summary>
        [Newtonsoft.Json.JsonProperty("digiDeliveryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigiDeliveryId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een referentie naar de Medewerker die als Mentor optreedt voor een Leerling.
    /// In Somtoday kan een Leerling meerdere Mentoren toegewezen krijgen op verschillende niveaus.
    /// De Stamgroep waar de Leerling in geplaatst is kan bijvoorbeeld één of twee mentoren hebben (de eerste en de tweede Mentor).
    /// De Leerling kan ook via zijn of haar Plaatsing direct een Mentor toegewezen krijgen.
    /// We hebben ervoor gekozen de Mentoren van de Leerling allemaal aan de Plaatsing te koppelen (ten koste van wat duplicatie) zodat clients ze makkelijk kunnen vinden.
    /// Om toch onderscheid te kunnen maken tussen de verschillende manieren waarop de Leerling een mentor toegewezen heeft gekregen heeft de Mentor een enum toewijzing.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Mentor
    {
        /// <summary>UUID van de Medewerker die als Mentor op kan treden voor de Leerling.</summary>
        [Newtonsoft.Json.JsonProperty("medewerker_uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Medewerker_uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("toewijzing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MentorToewijzing Toewijzing { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een groep leerlingen, maar niet aan een specifiek vak gebonden. 
    /// Iedere Leerling heeft een Stamgroep via zijn of haar Plaatsing. Dat houdt in dat de Stamgroep bijvoorbeeld kan wijzigen wanneer een Leerling overstapt van één Opleiding naar een andere.
    /// De onderwijskundige betekenis van de Stamgroep is iets dat kan verschillen van school tot school maar moet waarschijnlijk gezocht worden in de richting van gemeenschappelijke mentorlessen.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Stamgroep
    {
        /// <summary>Het UUID van de stamgroep.</summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>De omschrijving van de Stamgroep.</summary>
        [Newtonsoft.Json.JsonProperty("omschrijving", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Omschrijving { get; set; }

        [Newtonsoft.Json.JsonProperty("leerjaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Leerjaar { get; set; }

        [Newtonsoft.Json.JsonProperty("onderwijssoort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Onderwijssoort { get; set; }

        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naam { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Iedere Vestiging kan zijn eigen Opleidingen inrichten, dit zijn weerspiegelingen van landelijk voorgeschreven opleidingen, maar met een door de Vestiging verzonnen naam en afkorting.
    /// Een Vestiging kan bijvoorbeeld een Opleiding inrichten voor HAVO-NG, die er dan zo uit kan zien: ```{
    ///     "afkorting": "HAVO-NG",
    ///     "naam": "HAVO-NG",
    ///     "code": "0351"
    /// } ```
    /// Maar het kan ook exotischer: ```{
    ///     "afkorting": "GL-ZW-ISP"
    ///     "naam": "Gemengde Leerweg ZW-ISP"
    ///     "code": "2741"
    /// } ```
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Opleiding
    {
        /// <summary>De afkorting van de Opleiding. Deze kan voor een specifieke landelijke opleiding verschillen van Vestiging tot Vestiging.</summary>
        [Newtonsoft.Json.JsonProperty("afkorting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Afkorting { get; set; }

        /// <summary>De naam van de Opleiding. Deze kan voor een specifieke landelijke opleiding verschillen van Vestiging tot Vestiging.</summary>
        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naam { get; set; }

        /// <summary>Landelijke code van deze Opleiding. Deze zal voor dezelfde Opleiding op verschillende Vestigingen gelijk zijn.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>Landelijke naam van deze Opleiding. Deze zal voor dezelfde Opleiding op verschillende Vestigingnen gelijk zijn.</summary>
        [Newtonsoft.Json.JsonProperty("landelijke_naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Landelijke_naam { get; set; }

        /// <summary>De afkorting van het profiel van deze Opleiding.</summary>
        [Newtonsoft.Json.JsonProperty("profielafkorting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Profielafkorting { get; set; }

        /// <summary>De naam van het profiel van deze Opleiding.</summary>
        [Newtonsoft.Json.JsonProperty("profielnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Profielnaam { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een Medewerker kan in principe iedere Medewerker van de Instelling zijn, maar in de praktijk zullen alleen Medewerkers met een onderwijskundige taak, zoals docenten of mentoren, terugkomen.
    /// Een Medewerker kan aan meerdere Vestigingen verbonden zijn en is dus uniek op Instellingsniveau.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Medewerker
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>Het ECK-ID van de Medewerker.</summary>
        [Newtonsoft.Json.JsonProperty("eckid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Eckid { get; set; }

        /// <summary>Het Burgerservicenummer van de Medewerker.</summary>
        [Newtonsoft.Json.JsonProperty("bsn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bsn { get; set; }

        /// <summary>De roepnaam van de Medewerker. Er is voor de Medewerker geen apart veld voor de volledige voornamen.</summary>
        [Newtonsoft.Json.JsonProperty("roepnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Roepnaam { get; set; }

        /// <summary>De voorletters van de voornamen van de Medewerker.</summary>
        [Newtonsoft.Json.JsonProperty("voorletters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Voorletters { get; set; }

        /// <summary>Het voorvoegsel van de achternaam van de Medewerker.</summary>
        [Newtonsoft.Json.JsonProperty("voorvoegsel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Voorvoegsel { get; set; }

        /// <summary>De achternaam van de Medewerker.</summary>
        [Newtonsoft.Json.JsonProperty("achternaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Achternaam { get; set; }

        /// <summary>Het geslacht van de Medewerker.</summary>
        [Newtonsoft.Json.JsonProperty("geslacht", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MedewerkerGeslacht Geslacht { get; set; }

        /// <summary>De geboortedatum van de Medewerker, in het format YYYY-MM-DD.</summary>
        [Newtonsoft.Json.JsonProperty("geboortedatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Geboortedatum { get; set; }

        /// <summary>De adresgegevens van de Medewerker.</summary>
        [Newtonsoft.Json.JsonProperty("adres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Adres Adres { get; set; }

        /// <summary>Het e-mailadres van de Medewerker. Het is niet gegarandeerd dat dit uniek is.</summary>
        [Newtonsoft.Json.JsonProperty("emailadres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Emailadres { get; set; }

        /// <summary>Het werktelefoonnummer van de Medewerker.</summary>
        [Newtonsoft.Json.JsonProperty("werk_telefoonnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Werk_telefoonnummer { get; set; }

        /// <summary>Het privételefoonnummer van de Medewerker.</summary>
        [Newtonsoft.Json.JsonProperty("prive_telefoonnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prive_telefoonnummer { get; set; }

        /// <summary>Het medewerkernummer begint altijd met Medewerker.</summary>
        [Newtonsoft.Json.JsonProperty("medewerkernummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Medewerkernummer { get; set; }

        /// <summary>De afkorting van de Medewerker zoals de school die heeft bepaald.</summary>
        [Newtonsoft.Json.JsonProperty("afkorting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Afkorting { get; set; }

        /// <summary>De Lesgroepen waar deze Medewerker docent van is.</summary>
        [Newtonsoft.Json.JsonProperty("lesgroepen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LesgroepReferentie> Lesgroepen { get; set; }

        /// <summary>De Vestiging waar de aanroep voor gedaan wordt.</summary>
        [Newtonsoft.Json.JsonProperty("vestiging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VestigingReferentie Vestiging { get; set; }

        /// <summary>Een Medewerker heeft meerdere Vestigingen maar er is altijd één de hoofdvestiging van de Medewerker. Dit kan een Vestiging zijn waar de client geen autorisatie voor heeft.</summary>
        [Newtonsoft.Json.JsonProperty("hoofdvestiging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VestigingReferentie Hoofdvestiging { get; set; }

        /// <summary>Of de Medewerker aan een Lesgroep gekoppeld is.</summary>
        [Newtonsoft.Json.JsonProperty("is_docent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_docent { get; set; }

        /// <summary>De functie van de Medewerker.
        /// Dit is een door de Instelling vastgestelde waarde. Twee Medewerkers met hetzelfde takenpakket op twee verschillende Instellingen zouden dus totaal verschillende waarden voor Functie kunnen hebben.</summary>
        [Newtonsoft.Json.JsonProperty("functie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Functie { get; set; }

        /// <summary>De gebruikersnaam (inlognaam) van het account van de Medewerker.</summary>
        [Newtonsoft.Json.JsonProperty("gebruikersnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gebruikersnaam { get; set; }

        /// <summary>Het externe medewerkernummer; is niet altijd uniek.</summary>
        [Newtonsoft.Json.JsonProperty("externnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Externnummer { get; set; }

        /// <summary>Kennisnet identifier</summary>
        [Newtonsoft.Json.JsonProperty("eduPersonRealId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EduPersonRealId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een object om een pasfoto en het UUID van een Medewerker of Leerling aan elkaar te relateren.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Pasfoto
    {
        /// <summary>UUID van de Medewerker of Leerling waar de pasfoto bij hoort</summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>Binaire inhoud van het pasfoto bestand, Base-64 encoded.</summary>
        [Newtonsoft.Json.JsonProperty("bestand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Bestand { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een Lesgroep is in principe alleen een groepering van Leerlingen, het is niet gegarandeerd dat een Lesgroep ook aan een specifiek Vak gekoppeld is.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Lesgroep
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naam { get; set; }

        /// <summary>Lijst van de UUIDs van alle Leerlingen in deze Lesgroep waar de client rechten op heeft.</summary>
        [Newtonsoft.Json.JsonProperty("leerlingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> Leerlingen { get; set; }

        /// <summary>Lijst van de UUIDs van alle Medewerkers die docent van deze Lesgroep zijn.             Een Lesgroep kan meerdere docenten hebben, de volgorde waarin hun UUIDs in deze lijst voorkomen heeft geen betekenis.</summary>
        [Newtonsoft.Json.JsonProperty("docenten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> Docenten { get; set; }

        /// <summary>De afkorting van het Vak van de Lesgroep. Kan leeg zijn en Vestigingen bepalen zelf de waarde van deze afkorting, dus hetzelfde vak kan op verschillende Vestigingen verschillende afkortingen hebben.          example: bio</summary>
        [Newtonsoft.Json.JsonProperty("vak", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vak { get; set; }

        /// <summary>naam van het vak</summary>
        [Newtonsoft.Json.JsonProperty("vaknaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vaknaam { get; set; }

        /// <summary>Kan leeg zijn als de Lesgroep geen Vak heeft of als het Vak niet aan een Landelijk Vak gekoppeld is.</summary>
        [Newtonsoft.Json.JsonProperty("landelijke_vakcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Landelijke_vakcode { get; set; }

        /// <summary>Het UUID van het door de Vestiging ingerichte Vak waar deze Lesgroep aan gekoppeld is.</summary>
        [Newtonsoft.Json.JsonProperty("vakuuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Vakuuid { get; set; }

        /// <summary>De vakkeuzes van de Leerlingen van deze Lesgroep die refereren naar het Vak van deze Lesgroep.
        /// Aan de hand hiervan kunnen clients achterhalen of Leerlingen het Vak van de Lesgroep op een hoger niveau volgen (en bijvoorbeeld eigenlijk in een lager leerjaar zitten dan de andere Leerlingen van de Lesgroep)</summary>
        [Newtonsoft.Json.JsonProperty("vakkeuzes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vakkeuze> Vakkeuzes { get; set; }

        /// <summary>Het leerjaar van deze Lesgroep.
        /// Leerlingen in een Lesgroep kunnen vakken ook op een ander niveau volgen, wat inhoudt dat die Leerlingen een Plaatsing met een ander leerjaar hebben dan het leerjaar van de Lesgroep.
        /// Clients kunnen de samenstelling van de Lesgroep wat leerjaren betreft onderzoeken door naar de Vakkeuzes te kijken.</summary>
        [Newtonsoft.Json.JsonProperty("leerjaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Leerjaar { get; set; }

        /// <summary>Het schooljaar waarvoor deze Lesgroep geldig is. Lesgroepen zijn maar één schooljaar geldig.</summary>
        [Newtonsoft.Json.JsonProperty("schooljaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schooljaar { get; set; }

        /// <summary>De naam van de landelijke onderwijssoort waar de Lesgroep voor bedoeld is.</summary>
        [Newtonsoft.Json.JsonProperty("onderwijssoort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Onderwijssoort { get; set; }

        /// <summary>De Vestiging waar de Lesgroep onder valt. Een Lesgroep heeft altijd maar één Vestiging.</summary>
        [Newtonsoft.Json.JsonProperty("vestiging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VestigingReferentie Vestiging { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een verwijzing naar een Lesgroep met het uuid en de naam van de Lesgroep.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LesgroepReferentie
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naam { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een referentie naar een Vestiging met het uuid en de naam van de Vestiging erbij.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VestigingReferentie
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naam { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Leerlingen volgen bepaalde vakken gedurende een bepaald deel van hun schoolloopbaan.
    /// Meestal is een Vak geldig voor één specifiek leerjaar (bijvoorbeeld HAVO 3 Biologie) en heeft de Leerling dus voor hetzelfde Vak ieder schooljaar een nieuwe Vakkeuze.
    /// De Vakken waarnaar gerefereerd worden zijn door de Vestiging zelf ingerichte Vakken en hoewel het vaak afspiegelingen van landelijk voorgeschreven vakken zullen zijn, hoeven ze niet algemeen bekend te zijn. Vestigingen kunnen ook eigen namen voor de Vakken verzinnen.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Vakkeuze
    {
        /// <summary>Het UUID van de Vakkeuze.</summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>De begindatum van de Vakkeuze. De Vakkeuze is niet geldig voor deze datum, maar wel op deze datum. In het format YYYY-MM-DD.</summary>
        [Newtonsoft.Json.JsonProperty("begindatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Begindatum { get; set; }

        /// <summary>De einddatum van de Vakkeuze. De Vakkeuze is niet geldig na deze datum, maar wel op deze datum. In het format YYYY-MM-DD.</summary>
        [Newtonsoft.Json.JsonProperty("einddatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Einddatum { get; set; }

        /// <summary>Als het Vak van de Vakkeuze gekoppeld is aan een landelijk voorgeschreven vak, is dit de vakcode van het landelijke vak.</summary>
        [Newtonsoft.Json.JsonProperty("landelijke_vakcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Landelijke_vakcode { get; set; }

        /// <summary>Als het Vak van de Vakkeuze gekoppeld is aan een landelijk voorgeschreven vak, is dit de naam van het landelijke vak.</summary>
        [Newtonsoft.Json.JsonProperty("landelijke_vaknaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Landelijke_vaknaam { get; set; }

        /// <summary>De naam van het Vak van deze Vakkeuze. Deze kan per vestiging verschillend zijn.</summary>
        [Newtonsoft.Json.JsonProperty("school_vaknaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string School_vaknaam { get; set; }

        /// <summary>De afkorting van het Vak van deze Vakkeuze. Deze kan per vestiging verschillend zijn.</summary>
        [Newtonsoft.Json.JsonProperty("school_vakafkorting", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string School_vakafkorting { get; set; }

        /// <summary>Het niveau is een combinatie van de landelijke Onderwijssoort en het leerjaar van een Vakkeuze.
        /// Aan de hand hiervan kan men zien of een Leerling een Vak op een ander niveau volgt dan wat bijvoorbeeld uit het leerjaar van de Plaatsing zou blijken.
        /// Een Leerling die Tweetalig Havo volgt en in leerjaar 4 zit zou bijvoorbeeld het vak biologie op hoger niveau kunnen volgen, wat niveau HAVO-TT 5 op zou kunnen leveren.</summary>
        [Newtonsoft.Json.JsonProperty("niveau", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Niveau { get; set; }

        /// <summary>Het leerjaar van het niveau waarop de Leerling het Vak van deze Vakkeuze volgt.
        /// Aan de hand hiervan kan men ook zien of een Leerling een Vak op een ander niveau volgt dan wat bijvoorbeeld uit het leerjaar van de Plaatsing zou blijken. Dit is echter voor sommige clients makkelijker te interpreteren wanneer ze de landelijke Onderwijssoort niet nodig hebben.</summary>
        [Newtonsoft.Json.JsonProperty("leerjaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Leerjaar { get; set; }

        /// <summary>Landelijke Onderwijssoort waarvoor deze Vakkeuze geldt.</summary>
        [Newtonsoft.Json.JsonProperty("onderwijssoort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Onderwijssoort { get; set; }

        /// <summary>Naam van de opleiding. Deze kan per vestiging verschillend zijn.</summary>
        [Newtonsoft.Json.JsonProperty("opleiding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Opleiding { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een ouder of verzorger van een Leerling. 
    /// Één OuderVerzorger kan te relateren zijn aan meer dan één Leerling.
    /// Een OuderVerzorger is in principe uniek binnen de Instelling, dus twee Leerlingen met dezelfde ouders die op verschillende Vestigingen zitten, zullen gekoppeld zijn aan dezelfde OuderVerzorgers.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OuderVerzorger
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>Het geslacht van de OuderVerzorger.</summary>
        [Newtonsoft.Json.JsonProperty("geslacht", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OuderVerzorgerGeslacht Geslacht { get; set; }

        /// <summary>De voorletters van de voornamen van de OuderVerzorger.</summary>
        [Newtonsoft.Json.JsonProperty("voorletters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Voorletters { get; set; }

        /// <summary>Het voorvoegsel van de achternaam van de OuderVerzorger.</summary>
        [Newtonsoft.Json.JsonProperty("voorvoegsel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Voorvoegsel { get; set; }

        /// <summary>De achternaam van de OuderVerzorger.</summary>
        [Newtonsoft.Json.JsonProperty("achternaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Achternaam { get; set; }

        /// <summary>De gebruikersnaam (inlognaam) van het account van de OuderVerzorger.</summary>
        [Newtonsoft.Json.JsonProperty("gebruikersnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gebruikersnaam { get; set; }

        /// <summary>e-mailadres van de ouderVerzorger. Het is niet gegarandeerd dat dit uniek is.</summary>
        [Newtonsoft.Json.JsonProperty("emailadres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Emailadres { get; set; }

        [Newtonsoft.Json.JsonProperty("telefoonnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telefoonnummer { get; set; }

        [Newtonsoft.Json.JsonProperty("adres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Adres Adres { get; set; }

        /// <summary>De UUIDs van de Leerlingen op deze Vestiging van wie dit een ouder/verzorger is. Deze Vestiging is in deze context de Vestiging waarvoor het request gedaan wordt.</summary>
        [Newtonsoft.Json.JsonProperty("leerlingen_van_vestiging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> Leerlingen_van_vestiging { get; set; }

        [Newtonsoft.Json.JsonProperty("relatie_tot_leerlingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LeerlingReferentie> Relatie_tot_leerlingen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Leerlingen op deze Vestiging van wie dit een ouder/verzorger is. Deze Vestiging is in deze context de Vestiging waarvoor het request gedaan wordt.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LeerlingReferentie
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("relatiesoort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Relatiesoort { get; set; }

        [Newtonsoft.Json.JsonProperty("ouderlijk_gezag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Ouderlijk_gezag { get; set; }

        [Newtonsoft.Json.JsonProperty("mag_post_ontvangen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Mag_post_ontvangen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een gebeurtenis die ervoor kan zorgen dat de gegevens die een call naar een bepaald endpoint oplevert veranderen.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Event
    {
        /// <summary>Unieke identifier voor deze event.</summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>Unieke identifier voor de gewijzigde entiteit. Deze kan je gebruiken om specifiek die entiteit op te halen uit het relevante endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("entiteit_uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Entiteit_uuid { get; set; }

        /// <summary>Om wat voor entiteit het gaat (bijvoorbeeld Leerling, Lesgroep, Medewerker, enz.)</summary>
        [Newtonsoft.Json.JsonProperty("event_categorie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Event_categorie { get; set; }

        /// <summary>Omschrijft wat er met de entiteit is gebeurd (Created, Updated of Deleted)</summary>
        [Newtonsoft.Json.JsonProperty("event_aard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Event_aard { get; set; }

        /// <summary>Moment waarop de event is geregistreerd, in het format YYYY-MM-DD'T'HH:mm:ss.SSSSSS+/-HH:mm</summary>
        [Newtonsoft.Json.JsonProperty("eventDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EventDateTime { get; set; }

        /// <summary>Getal dat de volgorde van events aangeeft. Kan gebruikt worden om bijvoorbeeld alle events na een laatst ontvangen event op te vragen.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Index { get; set; }

        /// <summary>Url die aangeroepen moet worden om het object waar de event over gaat op te vragen.</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een somtoday-account van een leerling of een medewerker</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Account
    {
        /// <summary>UUID van de Leerling of Medewerker waar de Account aan gekoppeld is.</summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("usertype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AccountUsertype Usertype { get; set; }

        [Newtonsoft.Json.JsonProperty("remoteidentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RemoteUserIdentifier> Remoteidentifiers { get; set; }

        /// <summary>De gebruikersnaam van het account</summary>
        [Newtonsoft.Json.JsonProperty("gebruikersnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gebruikersnaam { get; set; }

        /// <summary>Het emailadres van de gebruiker. Het is niet gegarandeerd dat dit uniek is.</summary>
        [Newtonsoft.Json.JsonProperty("emailadres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Emailadres { get; set; }

        /// <summary>subject claim van de Account.</summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }

        /// <summary>UUID van de Account zelf.</summary>
        [Newtonsoft.Json.JsonProperty("account-uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid AccountUuid { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Een somtoday-account van een leerling of een medewerker</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountInput
    {
        /// <summary>UUID van de Leerling, Medewerker of OuderVerzorger waar de Account aan gekoppeld is/wordt.</summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("remoteidentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemoteUserIdentifier Remoteidentifier { get; set; }

        /// <summary>De gebruikersnaam van het account</summary>
        [Newtonsoft.Json.JsonProperty("gebruikersnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gebruikersnaam { get; set; }

        /// <summary>Het emailadres van de gebruiker, dat is een leerling, verzorger of medewerker</summary>
        [Newtonsoft.Json.JsonProperty("emailadres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Emailadres { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Ongeldige input voor het aanmaken van een account, zie de errors om te zien waar de input niet aan voldoet.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InvalidAccountInput
    {
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountInput Input { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Object dat beschrijft voor welke velden van een Account de Koppelpartij bij deze school recht heeft.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountPermissies
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("usertype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Usertype { get; set; }

        [Newtonsoft.Json.JsonProperty("remoteidentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Remoteidentifiers { get; set; }

        [Newtonsoft.Json.JsonProperty("gebruikersnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Gebruikersnaam { get; set; }

        [Newtonsoft.Json.JsonProperty("emailadres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Emailadres { get; set; }

        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("account-uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AccountUuid { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Het response-object voor het account-endpoint</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AccountResponse
    {
        [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Account> Accounts { get; set; }

        [Newtonsoft.Json.JsonProperty("veldpermissies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccountPermissies Veldpermissies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RemoteUserIdentifier
    {
        [Newtonsoft.Json.JsonProperty("providerType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RemoteUserIdentifierProviderType ProviderType { get; set; }

        /// <summary>Aan de hand van het domain kan worden bepaald welke OIDC configuratie moet worden gebruikt voor de remote user identifier.
        /// Er wordt geen nieuwe OIDC configuratie aangemaakt als er geen OIDC configuratie bestaat met het opgegeven domain.</summary>
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    /// <summary>Huiswerk dat aan de leerling is opgegeven. Als het huiswerk dezelfde begin- en einddatum heeft wordt het in de ELO als één item getoond op die datum. Als het huiswerk verschillende begin- en einddatums heeft, is dat omdat het een inleveropdracht is met een inleverperiode die ingaat op de begindatum en afloopt op de einddatum, of omdat het huiswerk is dat voor een bepaalde week of weken is opgegeven.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Huiswerk
    {
        /// <summary>HTML string met omschrijving erin</summary>
        [Newtonsoft.Json.JsonProperty("onderwerp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Onderwerp { get; set; }

        [Newtonsoft.Json.JsonProperty("omschrijving", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Omschrijving { get; set; }

        [Newtonsoft.Json.JsonProperty("huiswerktype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Huiswerktype Huiswerktype { get; set; }

        /// <summary>html string met notitie erin</summary>
        [Newtonsoft.Json.JsonProperty("notitie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notitie { get; set; }

        /// <summary>html string met leerdoelen erin</summary>
        [Newtonsoft.Json.JsonProperty("leerdoelen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Leerdoelen { get; set; }

        [Newtonsoft.Json.JsonProperty("tijdsindicatie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tijdsindicatie { get; set; }

        [Newtonsoft.Json.JsonProperty("huiswerkUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid HuiswerkUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("begindatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Begindatum { get; set; }

        [Newtonsoft.Json.JsonProperty("einddatum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Einddatum { get; set; }

        [Newtonsoft.Json.JsonProperty("inleveropdracht", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Inleveropdracht { get; set; }

        [Newtonsoft.Json.JsonProperty("vaknaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vaknaam { get; set; }

        [Newtonsoft.Json.JsonProperty("lesgroepUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid LesgroepUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("externMateriaal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HuiswerkExternMateriaal> ExternMateriaal { get; set; }

        [Newtonsoft.Json.JsonProperty("heeftBijlages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HeeftBijlages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HuiswerkExternMateriaal
    {
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("omschrijving", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Omschrijving { get; set; }

        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>het soort content dat men mag verwachten dat achter de URI zit.</summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HuiswerkKlik
    {
        [Newtonsoft.Json.JsonProperty("leerlingUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid LeerlingUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("huiswerkUUID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid HuiswerkUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("externMateriaalUUID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ExternMateriaalUUID { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>Moment waarop de klik plaatsvond</summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HuiswerkBijlagenCallback
    {
        [Newtonsoft.Json.JsonProperty("callbackUrl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri CallbackUrl { get; set; }

        /// <summary>De state die hier wordt opgegeven wordt versleuteld met de secret van de koppelpartij en het algoritme "HmacSHA1". De versleutelde waarde wordt in de callback meegestuurd en kan worden gebruikt om te verifiëren dat de callback afkomstig is van somtoday.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HuiswerkBijlagen
    {
        [Newtonsoft.Json.JsonProperty("bijlagen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Bijlagen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RCurriculum
    {
        /// <summary>De elementcode van het vak waarvoor de toets gegeven wordt.</summary>
        [Newtonsoft.Json.JsonProperty("vak", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vak { get; set; }

        /// <summary>Niveau van het curriculum, ie, HAVO/VMBO-TL/VWO etc</summary>
        [Newtonsoft.Json.JsonProperty("niveau", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Niveau { get; set; }

        /// <summary>Leerjaar in alom bekende vorm : 1, 2, 3, 4, 5 of 6</summary>
        [Newtonsoft.Json.JsonProperty("leerjaar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Leerjaar { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RLeerlingResultaat
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        /// <summary>Het uuid van de leerling die dit resultaat behaalde. Let op, het toetsdeelnemerId of het toetsdeelnemerEckId dient gevuld te zijn. Voorkeur gaat uit naar toetsdeelnemerId.</summary>
        [Newtonsoft.Json.JsonProperty("toetsdeelnemerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ToetsdeelnemerId { get; set; }

        /// <summary>Het ECKiD van de leerling die dit resultaat behaalde. Let op, het toetsdeelnemerId of het toetsdeelnemerEckId dient gevuld te zijn. Voorkeur gaat uit naar toetsdeelnemerId.</summary>
        [Newtonsoft.Json.JsonProperty("toetsdeelnemerEckId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToetsdeelnemerEckId { get; set; }

        /// <summary>Het id van de toetsafname die dit resultaat betreft</summary>
        [Newtonsoft.Json.JsonProperty("toetsAfnameId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToetsAfnameId { get; set; }

        /// <summary>Het daadwerkelijk behaalde resultaat, cijfer of text</summary>
        [Newtonsoft.Json.JsonProperty("resultaat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resultaat { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RFormatiefLeerlingResultaat
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        /// <summary>Het uuid van de leerling die dit resultaat behaalde. Let op, het toetsdeelnemerId of het toetsdeelnemerEckId dient gevuld te zijn. Voorkeur gaat uit naar toetsdeelnemerId.</summary>
        [Newtonsoft.Json.JsonProperty("toetsdeelnemerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ToetsdeelnemerId { get; set; }

        /// <summary>Het ECKiD van de leerling die dit resultaat behaalde. Let op, het toetsdeelnemerId of het toetsdeelnemerEckId dient gevuld te zijn. Voorkeur gaat uit naar toetsdeelnemerId.</summary>
        [Newtonsoft.Json.JsonProperty("toetsdeelnemerEckId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToetsdeelnemerEckId { get; set; }

        /// <summary>Het id van de toetsafname die dit resultaat betreft</summary>
        [Newtonsoft.Json.JsonProperty("toetsAfnameId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToetsAfnameId { get; set; }

        /// <summary>Het daadwerkelijk behaalde resultaat, cijfer of text. Maximaal 1023 tekens lang.</summary>
        [Newtonsoft.Json.JsonProperty("resultaat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resultaat { get; set; }

        /// <summary>Het type resultaat, percentage, aantal goed, vrije text, gvo etc</summary>
        [Newtonsoft.Json.JsonProperty("formatiefResultaatType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RFormatiefLeerlingResultaatFormatiefResultaatType FormatiefResultaatType { get; set; }

        /// <summary>Mocht het resultaat een onderdeel betreffen, kan er optioneel een naam worden meegegeven om de interface te verduidelijken.</summary>
        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naam { get; set; }

        /// <summary>Wanneer het formatieve resultaat een onderdeel is van een ander formatief resultaat, kan hier de uuid van het eerder ingeschoten resultaat worden meegegeven. Let op, er kan maar 1 subniveau worden gedefineerd.</summary>
        [Newtonsoft.Json.JsonProperty("parentResultaat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ParentResultaat { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RLeerlingResultaatStatus
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        /// <summary>Het id van de leerling die dit resultaat behaalde</summary>
        [Newtonsoft.Json.JsonProperty("toetsdeelnemerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToetsdeelnemerId { get; set; }

        /// <summary>Het id van de toetsafname die dit resultaat betreft</summary>
        [Newtonsoft.Json.JsonProperty("toetsAfnameId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToetsAfnameId { get; set; }

        /// <summary>Het resultaat is door een medewerker verwerkt in een resultaat in Somtoday en is beschikbaar voor de leerling</summary>
        [Newtonsoft.Json.JsonProperty("resultaatStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ResultaatStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RNiveauResultaat
    {
        /// <summary>Het daadwerkelijk behaalde resultaat, cijfer of text</summary>
        [Newtonsoft.Json.JsonProperty("resultaat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resultaat { get; set; }

        /// <summary>Niveau van het curriculum, ie, HAVO/VMBO-TL/VWO etc</summary>
        [Newtonsoft.Json.JsonProperty("niveau", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Niveau { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RToets
    {
        /// <summary>Leverancier toetsidentifier, bij voorkeur UUID, moet meegepost worden</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Toetsnaam, zichtbaar in de interface</summary>
        [Newtonsoft.Json.JsonProperty("naam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naam { get; set; }

        /// <summary>Vak, leerjaar en niveau waarvoor de toets geldt</summary>
        [Newtonsoft.Json.JsonProperty("curriculum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RCurriculum Curriculum { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RToetsAfname
    {
        /// <summary>Leverancieridentifier van deze ToetsAfname.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>Het moment waarop het resultaat is vastgesteld</summary>
        [Newtonsoft.Json.JsonProperty("afnameMoment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset AfnameMoment { get; set; }

        /// <summary>UUID van de medewerker die de toets afneemt. Let op, medewerkerId of medewerkerEckId dient gevuld te zijn. Voorkeur gaat uit naar medewerkerId.</summary>
        [Newtonsoft.Json.JsonProperty("medewerkerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid MedewerkerId { get; set; }

        /// <summary>ECKiD van de medewerker die de toets afneemt. Let op, medewerkerId of medewerkerEckId dient gevuld te zijn. Voorkeur gaat uit naar medewerkerId.</summary>
        [Newtonsoft.Json.JsonProperty("medewerkerEckId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MedewerkerEckId { get; set; }

        /// <summary>Het type resultaat, SUMMATIEF of FORMATIEF</summary>
        [Newtonsoft.Json.JsonProperty("resultaatType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RToetsAfnameResultaatType ResultaatType { get; set; }

        /// <summary>Het id van de toets waar deze resultaten voor gelden. Stuur minimaal een toetsId of lesgroepId mee.</summary>
        [Newtonsoft.Json.JsonProperty("toetsId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToetsId { get; set; }

        /// <summary>Het id van de lesgroep waarvoor de resultaten gelden. Stuur minimaal een toetsId of lesgroepId mee.</summary>
        [Newtonsoft.Json.JsonProperty("lesgroepId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LesgroepId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Peilschooljaar
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HUIDIG")]
        HUIDIG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VOLGEND")]
        VOLGEND = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DossierResultaatToetsType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TOETS")]
        TOETS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAMENGESTELDETOETS")]
        SAMENGESTELDETOETS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LeerlingGeslacht
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ONBEKEND")]
        ONBEKEND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MAN")]
        MAN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VROUW")]
        VROUW = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MentorToewijzing
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Plaatsing")]
        Plaatsing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EersteMentorStamgroep")]
        EersteMentorStamgroep = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TweedeMentorStamgroep")]
        TweedeMentorStamgroep = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MedewerkerGeslacht
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ONBEKEND")]
        ONBEKEND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MAN")]
        MAN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VROUW")]
        VROUW = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OuderVerzorgerGeslacht
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MAN")]
        MAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VROUW")]
        VROUW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ONBEKEND")]
        ONBEKEND = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AccountUsertype
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LEERLING")]
        LEERLING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDEWERKER")]
        MEDEWERKER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VERZORGER")]
        VERZORGER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RemoteUserIdentifierProviderType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AZURE")]
        AZURE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GOOGLE")]
        GOOGLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OIDC")]
        OIDC = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Huiswerktype
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LESSTOF")]
        LESSTOF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HUISWERK")]
        HUISWERK = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TOETS")]
        TOETS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GROTE_TOETS")]
        GROTE_TOETS = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RFormatiefLeerlingResultaatFormatiefResultaatType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PERCENTAGE")]
        PERCENTAGE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"REFERENTIE_NIVEAU")]
        REFERENTIE_NIVEAU = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AANTAL_GOED")]
        AANTAL_GOED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CIJFER")]
        CIJFER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VRIJE_TEKST")]
        VRIJE_TEKST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GVO")]
        GVO = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RToetsAfnameResultaatType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SUMMATIEF")]
        SUMMATIEF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FORMATIEF")]
        FORMATIEF = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108